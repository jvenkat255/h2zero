package synapticloop.sample.h2zero.metrics;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//             (java-create-metrics-table.templar)


import com.codahale.metrics.MetricRegistry;

import synapticloop.h2zero.base.manager.MetricsManager;
import com.codahale.metrics.Counter;
import com.codahale.metrics.RatioGauge;


import synapticloop.sample.h2zero.model.UserPet;
public class UserPetMetrics {
	// These are the metrics holders - there are a lot of them - better to have and not need, than need and not have!
	// <fieldName>SetterHit counts the number setters that are invoked which successfully changes the value
	// <fieldName>SetterMiss counts the number of setters that did not change the value

	// <fieldName>SetterHitRatio provides the ratio of hits to total setters
	// <fieldName>SetterMissRatio provides the ratio of misses to total setters


	// <fieldName>GetterHit counts the number of getters that returns an already filled in value
	// <fieldName>GetterMiss counts the number of getters that needed to be loaded from a non-populated value

	// <fieldName>GetterHitRatio provides the ratio of hits to total getters
	// <fieldName>GetterMissRatio provides the ratio of misses to total getters


	// <className>GetterHit counts the number of getters that returns an already filled in object
	// <className>GetterMiss counts the number of getters that needed to be loaded from a non-populated object

	// <className>GetterHitRatio provides the ratio of hits to total getters
	// <className>GetterMissRatio provides the ratio of misses to total getters

	public static final Counter userPetIdUserPetGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUserPet", "getter", "hit"));
	public static final Counter userPetIdUserPetGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUserPet", "getter", "miss"));
	public static final RatioGauge userPetIdUserPetGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUserPet", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserPetGetterHit.getCount(), userPetIdUserPetGetterHit.getCount() + userPetIdUserPetGetterMiss.getCount()));}});
	public static final RatioGauge userPetIdUserPetGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUserPet", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserPetGetterMiss.getCount(), userPetIdUserPetGetterHit.getCount() + userPetIdUserPetGetterMiss.getCount()));}});
	public static final Counter userPetIdUserPetSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUserPet", "setter", "hit"));
	public static final Counter userPetIdUserPetSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUserPet", "setter", "miss"));
	public static final RatioGauge userPetIdUserPetSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUserPet", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserPetSetterHit.getCount(), userPetIdUserPetSetterHit.getCount() + userPetIdUserPetSetterMiss.getCount()));}});
	public static final RatioGauge userPetIdUserPetSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUserPet", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserPetSetterMiss.getCount(), userPetIdUserPetSetterHit.getCount() + userPetIdUserPetSetterMiss.getCount()));}});
	public static final Counter userPetUserGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "user", "getter", "hit"));
	public static final Counter userPetUserGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "user", "getter", "miss"));
	public static final RatioGauge userPetUserGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "user", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetUserGetterHit.getCount(), userPetUserGetterHit.getCount() + userPetUserGetterMiss.getCount()));}});
	public static final RatioGauge userPetUserGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "user", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetUserGetterMiss.getCount(), userPetUserGetterHit.getCount() + userPetUserGetterMiss.getCount()));}});
	public static final Counter userPetIdUserGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUser", "getter", "hit"));
	public static final Counter userPetIdUserGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUser", "getter", "miss"));
	public static final RatioGauge userPetIdUserGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUser", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserGetterHit.getCount(), userPetIdUserGetterHit.getCount() + userPetIdUserGetterMiss.getCount()));}});
	public static final RatioGauge userPetIdUserGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUser", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserGetterMiss.getCount(), userPetIdUserGetterHit.getCount() + userPetIdUserGetterMiss.getCount()));}});
	public static final Counter userPetIdUserSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUser", "setter", "hit"));
	public static final Counter userPetIdUserSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idUser", "setter", "miss"));
	public static final RatioGauge userPetIdUserSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUser", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserSetterHit.getCount(), userPetIdUserSetterHit.getCount() + userPetIdUserSetterMiss.getCount()));}});
	public static final RatioGauge userPetIdUserSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idUser", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdUserSetterMiss.getCount(), userPetIdUserSetterHit.getCount() + userPetIdUserSetterMiss.getCount()));}});
	public static final Counter userPetPetGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "pet", "getter", "hit"));
	public static final Counter userPetPetGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "pet", "getter", "miss"));
	public static final RatioGauge userPetPetGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "pet", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetPetGetterHit.getCount(), userPetPetGetterHit.getCount() + userPetPetGetterMiss.getCount()));}});
	public static final RatioGauge userPetPetGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "pet", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetPetGetterMiss.getCount(), userPetPetGetterHit.getCount() + userPetPetGetterMiss.getCount()));}});
	public static final Counter userPetIdPetGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idPet", "getter", "hit"));
	public static final Counter userPetIdPetGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idPet", "getter", "miss"));
	public static final RatioGauge userPetIdPetGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idPet", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdPetGetterHit.getCount(), userPetIdPetGetterHit.getCount() + userPetIdPetGetterMiss.getCount()));}});
	public static final RatioGauge userPetIdPetGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idPet", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdPetGetterMiss.getCount(), userPetIdPetGetterHit.getCount() + userPetIdPetGetterMiss.getCount()));}});
	public static final Counter userPetIdPetSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idPet", "setter", "hit"));
	public static final Counter userPetIdPetSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "idPet", "setter", "miss"));
	public static final RatioGauge userPetIdPetSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idPet", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdPetSetterHit.getCount(), userPetIdPetSetterHit.getCount() + userPetIdPetSetterMiss.getCount()));}});
	public static final RatioGauge userPetIdPetSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserPet.class, "idPet", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userPetIdPetSetterMiss.getCount(), userPetIdPetSetterHit.getCount() + userPetIdPetSetterMiss.getCount()));}});

	// now for the table statistics
	public static final Counter userPetAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "access"));
	public static final Counter userPetFinderAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "finder", "access"));
	public static final Counter userPetCounterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "counter", "access"));
	public static final Counter userPetQuestionAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "question", "access"));
	public static final Counter userPetDeleterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "deleter", "access"));
	public static final Counter userPetInserterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "inserter", "access"));
	public static final Counter userPetUpdaterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "updater", "access"));
	public static final Counter userPetInsert = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "insert"));
	public static final Counter userPetInsertOrUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "insertOrUpdate"));
	public static final Counter userPetDelete = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "delete"));
	public static final Counter userPetEnsure = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "ensure"));
	public static final Counter userPetRefresh = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "refresh"));
	public static final Counter userPetUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserPet.class, "update"));

}