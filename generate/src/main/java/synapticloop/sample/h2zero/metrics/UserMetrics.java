package synapticloop.sample.h2zero.metrics;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//             (java-create-metrics-table.templar)


import com.codahale.metrics.MetricRegistry;

import synapticloop.h2zero.base.manager.MetricsManager;
import com.codahale.metrics.Counter;
import com.codahale.metrics.RatioGauge;


import synapticloop.sample.h2zero.model.User;
public class UserMetrics {
	// These are the metrics holders - there are a lot of them - better to have and not need, than need and not have!
	// <fieldName>SetterHit counts the number setters that are invoked which successfully changes the value
	// <fieldName>SetterMiss counts the number of setters that did not change the value

	// <fieldName>SetterHitRatio provides the ratio of hits to total setters
	// <fieldName>SetterMissRatio provides the ratio of misses to total setters


	// <fieldName>GetterHit counts the number of getters that returns an already filled in value
	// <fieldName>GetterMiss counts the number of getters that needed to be loaded from a non-populated value

	// <fieldName>GetterHitRatio provides the ratio of hits to total getters
	// <fieldName>GetterMissRatio provides the ratio of misses to total getters


	// <className>GetterHit counts the number of getters that returns an already filled in object
	// <className>GetterMiss counts the number of getters that needed to be loaded from a non-populated object

	// <className>GetterHitRatio provides the ratio of hits to total getters
	// <className>GetterMissRatio provides the ratio of misses to total getters

	public static final Counter userIdUserGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUser", "getter", "hit"));
	public static final Counter userIdUserGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUser", "getter", "miss"));
	public static final RatioGauge userIdUserGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUser", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserGetterHit.getCount(), userIdUserGetterHit.getCount() + userIdUserGetterMiss.getCount()));}});
	public static final RatioGauge userIdUserGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUser", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserGetterMiss.getCount(), userIdUserGetterHit.getCount() + userIdUserGetterMiss.getCount()));}});
	public static final Counter userIdUserSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUser", "setter", "hit"));
	public static final Counter userIdUserSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUser", "setter", "miss"));
	public static final RatioGauge userIdUserSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUser", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserSetterHit.getCount(), userIdUserSetterHit.getCount() + userIdUserSetterMiss.getCount()));}});
	public static final RatioGauge userIdUserSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUser", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserSetterMiss.getCount(), userIdUserSetterHit.getCount() + userIdUserSetterMiss.getCount()));}});
	public static final Counter userUserTypeGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "userType", "getter", "hit"));
	public static final Counter userUserTypeGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "userType", "getter", "miss"));
	public static final RatioGauge userUserTypeGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "userType", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userUserTypeGetterHit.getCount(), userUserTypeGetterHit.getCount() + userUserTypeGetterMiss.getCount()));}});
	public static final RatioGauge userUserTypeGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "userType", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userUserTypeGetterMiss.getCount(), userUserTypeGetterHit.getCount() + userUserTypeGetterMiss.getCount()));}});
	public static final Counter userIdUserTypeGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUserType", "getter", "hit"));
	public static final Counter userIdUserTypeGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUserType", "getter", "miss"));
	public static final RatioGauge userIdUserTypeGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUserType", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserTypeGetterHit.getCount(), userIdUserTypeGetterHit.getCount() + userIdUserTypeGetterMiss.getCount()));}});
	public static final RatioGauge userIdUserTypeGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUserType", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserTypeGetterMiss.getCount(), userIdUserTypeGetterHit.getCount() + userIdUserTypeGetterMiss.getCount()));}});
	public static final Counter userIdUserTypeSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUserType", "setter", "hit"));
	public static final Counter userIdUserTypeSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "idUserType", "setter", "miss"));
	public static final RatioGauge userIdUserTypeSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUserType", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserTypeSetterHit.getCount(), userIdUserTypeSetterHit.getCount() + userIdUserTypeSetterMiss.getCount()));}});
	public static final RatioGauge userIdUserTypeSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "idUserType", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userIdUserTypeSetterMiss.getCount(), userIdUserTypeSetterHit.getCount() + userIdUserTypeSetterMiss.getCount()));}});
	public static final Counter userFlIsAliveGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "flIsAlive", "getter", "hit"));
	public static final Counter userFlIsAliveGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "flIsAlive", "getter", "miss"));
	public static final RatioGauge userFlIsAliveGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "flIsAlive", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userFlIsAliveGetterHit.getCount(), userFlIsAliveGetterHit.getCount() + userFlIsAliveGetterMiss.getCount()));}});
	public static final RatioGauge userFlIsAliveGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "flIsAlive", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userFlIsAliveGetterMiss.getCount(), userFlIsAliveGetterHit.getCount() + userFlIsAliveGetterMiss.getCount()));}});
	public static final Counter userFlIsAliveSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "flIsAlive", "setter", "hit"));
	public static final Counter userFlIsAliveSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "flIsAlive", "setter", "miss"));
	public static final RatioGauge userFlIsAliveSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "flIsAlive", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userFlIsAliveSetterHit.getCount(), userFlIsAliveSetterHit.getCount() + userFlIsAliveSetterMiss.getCount()));}});
	public static final RatioGauge userFlIsAliveSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "flIsAlive", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userFlIsAliveSetterMiss.getCount(), userFlIsAliveSetterHit.getCount() + userFlIsAliveSetterMiss.getCount()));}});
	public static final Counter userNumAgeGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "numAge", "getter", "hit"));
	public static final Counter userNumAgeGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "numAge", "getter", "miss"));
	public static final RatioGauge userNumAgeGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "numAge", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNumAgeGetterHit.getCount(), userNumAgeGetterHit.getCount() + userNumAgeGetterMiss.getCount()));}});
	public static final RatioGauge userNumAgeGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "numAge", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNumAgeGetterMiss.getCount(), userNumAgeGetterHit.getCount() + userNumAgeGetterMiss.getCount()));}});
	public static final Counter userNumAgeSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "numAge", "setter", "hit"));
	public static final Counter userNumAgeSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "numAge", "setter", "miss"));
	public static final RatioGauge userNumAgeSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "numAge", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNumAgeSetterHit.getCount(), userNumAgeSetterHit.getCount() + userNumAgeSetterMiss.getCount()));}});
	public static final RatioGauge userNumAgeSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "numAge", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNumAgeSetterMiss.getCount(), userNumAgeSetterHit.getCount() + userNumAgeSetterMiss.getCount()));}});
	public static final Counter userNmUsernameGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "nmUsername", "getter", "hit"));
	public static final Counter userNmUsernameGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "nmUsername", "getter", "miss"));
	public static final RatioGauge userNmUsernameGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "nmUsername", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNmUsernameGetterHit.getCount(), userNmUsernameGetterHit.getCount() + userNmUsernameGetterMiss.getCount()));}});
	public static final RatioGauge userNmUsernameGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "nmUsername", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNmUsernameGetterMiss.getCount(), userNmUsernameGetterHit.getCount() + userNmUsernameGetterMiss.getCount()));}});
	public static final Counter userNmUsernameSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "nmUsername", "setter", "hit"));
	public static final Counter userNmUsernameSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "nmUsername", "setter", "miss"));
	public static final RatioGauge userNmUsernameSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "nmUsername", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNmUsernameSetterHit.getCount(), userNmUsernameSetterHit.getCount() + userNmUsernameSetterMiss.getCount()));}});
	public static final RatioGauge userNmUsernameSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "nmUsername", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userNmUsernameSetterMiss.getCount(), userNmUsernameSetterHit.getCount() + userNmUsernameSetterMiss.getCount()));}});
	public static final Counter userTxtAddressEmailGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtAddressEmail", "getter", "hit"));
	public static final Counter userTxtAddressEmailGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtAddressEmail", "getter", "miss"));
	public static final RatioGauge userTxtAddressEmailGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtAddressEmail", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtAddressEmailGetterHit.getCount(), userTxtAddressEmailGetterHit.getCount() + userTxtAddressEmailGetterMiss.getCount()));}});
	public static final RatioGauge userTxtAddressEmailGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtAddressEmail", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtAddressEmailGetterMiss.getCount(), userTxtAddressEmailGetterHit.getCount() + userTxtAddressEmailGetterMiss.getCount()));}});
	public static final Counter userTxtAddressEmailSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtAddressEmail", "setter", "hit"));
	public static final Counter userTxtAddressEmailSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtAddressEmail", "setter", "miss"));
	public static final RatioGauge userTxtAddressEmailSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtAddressEmail", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtAddressEmailSetterHit.getCount(), userTxtAddressEmailSetterHit.getCount() + userTxtAddressEmailSetterMiss.getCount()));}});
	public static final RatioGauge userTxtAddressEmailSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtAddressEmail", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtAddressEmailSetterMiss.getCount(), userTxtAddressEmailSetterHit.getCount() + userTxtAddressEmailSetterMiss.getCount()));}});
	public static final Counter userTxtPasswordGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtPassword", "getter", "hit"));
	public static final Counter userTxtPasswordGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtPassword", "getter", "miss"));
	public static final RatioGauge userTxtPasswordGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtPassword", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtPasswordGetterHit.getCount(), userTxtPasswordGetterHit.getCount() + userTxtPasswordGetterMiss.getCount()));}});
	public static final RatioGauge userTxtPasswordGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtPassword", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtPasswordGetterMiss.getCount(), userTxtPasswordGetterHit.getCount() + userTxtPasswordGetterMiss.getCount()));}});
	public static final Counter userTxtPasswordSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtPassword", "setter", "hit"));
	public static final Counter userTxtPasswordSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "txtPassword", "setter", "miss"));
	public static final RatioGauge userTxtPasswordSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtPassword", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtPasswordSetterHit.getCount(), userTxtPasswordSetterHit.getCount() + userTxtPasswordSetterMiss.getCount()));}});
	public static final RatioGauge userTxtPasswordSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "txtPassword", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTxtPasswordSetterMiss.getCount(), userTxtPasswordSetterHit.getCount() + userTxtPasswordSetterMiss.getCount()));}});
	public static final Counter userDtmSignupGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "dtmSignup", "getter", "hit"));
	public static final Counter userDtmSignupGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "dtmSignup", "getter", "miss"));
	public static final RatioGauge userDtmSignupGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "dtmSignup", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userDtmSignupGetterHit.getCount(), userDtmSignupGetterHit.getCount() + userDtmSignupGetterMiss.getCount()));}});
	public static final RatioGauge userDtmSignupGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "dtmSignup", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userDtmSignupGetterMiss.getCount(), userDtmSignupGetterHit.getCount() + userDtmSignupGetterMiss.getCount()));}});
	public static final Counter userDtmSignupSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "dtmSignup", "setter", "hit"));
	public static final Counter userDtmSignupSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "dtmSignup", "setter", "miss"));
	public static final RatioGauge userDtmSignupSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "dtmSignup", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userDtmSignupSetterHit.getCount(), userDtmSignupSetterHit.getCount() + userDtmSignupSetterMiss.getCount()));}});
	public static final RatioGauge userDtmSignupSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(User.class, "dtmSignup", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userDtmSignupSetterMiss.getCount(), userDtmSignupSetterHit.getCount() + userDtmSignupSetterMiss.getCount()));}});

	// now for the table statistics
	public static final Counter userAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "access"));
	public static final Counter userFinderAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "finder", "access"));
	public static final Counter userCounterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "counter", "access"));
	public static final Counter userQuestionAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "question", "access"));
	public static final Counter userDeleterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "deleter", "access"));
	public static final Counter userInserterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "inserter", "access"));
	public static final Counter userUpdaterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "updater", "access"));
	public static final Counter userInsert = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "insert"));
	public static final Counter userInsertOrUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "insertOrUpdate"));
	public static final Counter userDelete = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "delete"));
	public static final Counter userEnsure = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "ensure"));
	public static final Counter userRefresh = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "refresh"));
	public static final Counter userUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(User.class, "update"));

}