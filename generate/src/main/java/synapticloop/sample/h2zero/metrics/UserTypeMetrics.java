package synapticloop.sample.h2zero.metrics;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//             (java-create-metrics-table.templar)


import com.codahale.metrics.MetricRegistry;

import synapticloop.h2zero.base.manager.MetricsManager;
import com.codahale.metrics.Counter;
import com.codahale.metrics.RatioGauge;


import synapticloop.sample.h2zero.model.UserType;
public class UserTypeMetrics {
	// These are the metrics holders - there are a lot of them - better to have and not need, than need and not have!
	// <fieldName>SetterHit counts the number setters that are invoked which successfully changes the value
	// <fieldName>SetterMiss counts the number of setters that did not change the value

	// <fieldName>SetterHitRatio provides the ratio of hits to total setters
	// <fieldName>SetterMissRatio provides the ratio of misses to total setters


	// <fieldName>GetterHit counts the number of getters that returns an already filled in value
	// <fieldName>GetterMiss counts the number of getters that needed to be loaded from a non-populated value

	// <fieldName>GetterHitRatio provides the ratio of hits to total getters
	// <fieldName>GetterMissRatio provides the ratio of misses to total getters


	// <className>GetterHit counts the number of getters that returns an already filled in object
	// <className>GetterMiss counts the number of getters that needed to be loaded from a non-populated object

	// <className>GetterHitRatio provides the ratio of hits to total getters
	// <className>GetterMissRatio provides the ratio of misses to total getters

	public static final Counter userTypeIdUserTypeGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "idUserType", "getter", "hit"));
	public static final Counter userTypeIdUserTypeGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "idUserType", "getter", "miss"));
	public static final RatioGauge userTypeIdUserTypeGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "idUserType", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeIdUserTypeGetterHit.getCount(), userTypeIdUserTypeGetterHit.getCount() + userTypeIdUserTypeGetterMiss.getCount()));}});
	public static final RatioGauge userTypeIdUserTypeGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "idUserType", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeIdUserTypeGetterMiss.getCount(), userTypeIdUserTypeGetterHit.getCount() + userTypeIdUserTypeGetterMiss.getCount()));}});
	public static final Counter userTypeIdUserTypeSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "idUserType", "setter", "hit"));
	public static final Counter userTypeIdUserTypeSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "idUserType", "setter", "miss"));
	public static final RatioGauge userTypeIdUserTypeSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "idUserType", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeIdUserTypeSetterHit.getCount(), userTypeIdUserTypeSetterHit.getCount() + userTypeIdUserTypeSetterMiss.getCount()));}});
	public static final RatioGauge userTypeIdUserTypeSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "idUserType", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeIdUserTypeSetterMiss.getCount(), userTypeIdUserTypeSetterHit.getCount() + userTypeIdUserTypeSetterMiss.getCount()));}});
	public static final Counter userTypeNmUserTypeGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "nmUserType", "getter", "hit"));
	public static final Counter userTypeNmUserTypeGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "nmUserType", "getter", "miss"));
	public static final RatioGauge userTypeNmUserTypeGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "nmUserType", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeNmUserTypeGetterHit.getCount(), userTypeNmUserTypeGetterHit.getCount() + userTypeNmUserTypeGetterMiss.getCount()));}});
	public static final RatioGauge userTypeNmUserTypeGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "nmUserType", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeNmUserTypeGetterMiss.getCount(), userTypeNmUserTypeGetterHit.getCount() + userTypeNmUserTypeGetterMiss.getCount()));}});
	public static final Counter userTypeNmUserTypeSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "nmUserType", "setter", "hit"));
	public static final Counter userTypeNmUserTypeSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "nmUserType", "setter", "miss"));
	public static final RatioGauge userTypeNmUserTypeSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "nmUserType", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeNmUserTypeSetterHit.getCount(), userTypeNmUserTypeSetterHit.getCount() + userTypeNmUserTypeSetterMiss.getCount()));}});
	public static final RatioGauge userTypeNmUserTypeSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(UserType.class, "nmUserType", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(userTypeNmUserTypeSetterMiss.getCount(), userTypeNmUserTypeSetterHit.getCount() + userTypeNmUserTypeSetterMiss.getCount()));}});

	// now for the table statistics
	public static final Counter userTypeAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "access"));
	public static final Counter userTypeFinderAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "finder", "access"));
	public static final Counter userTypeCounterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "counter", "access"));
	public static final Counter userTypeQuestionAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "question", "access"));
	public static final Counter userTypeDeleterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "deleter", "access"));
	public static final Counter userTypeInserterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "inserter", "access"));
	public static final Counter userTypeUpdaterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "updater", "access"));
	public static final Counter userTypeInsert = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "insert"));
	public static final Counter userTypeInsertOrUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "insertOrUpdate"));
	public static final Counter userTypeDelete = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "delete"));
	public static final Counter userTypeEnsure = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "ensure"));
	public static final Counter userTypeRefresh = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "refresh"));
	public static final Counter userTypeUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(UserType.class, "update"));

}