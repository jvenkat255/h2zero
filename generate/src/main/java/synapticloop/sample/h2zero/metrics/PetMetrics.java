package synapticloop.sample.h2zero.metrics;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//             (java-create-metrics-table.templar)


import com.codahale.metrics.MetricRegistry;

import synapticloop.h2zero.base.manager.MetricsManager;
import com.codahale.metrics.Counter;
import com.codahale.metrics.RatioGauge;


import synapticloop.sample.h2zero.model.Pet;
public class PetMetrics {
	// These are the metrics holders - there are a lot of them - better to have and not need, than need and not have!
	// <fieldName>SetterHit counts the number setters that are invoked which successfully changes the value
	// <fieldName>SetterMiss counts the number of setters that did not change the value

	// <fieldName>SetterHitRatio provides the ratio of hits to total setters
	// <fieldName>SetterMissRatio provides the ratio of misses to total setters


	// <fieldName>GetterHit counts the number of getters that returns an already filled in value
	// <fieldName>GetterMiss counts the number of getters that needed to be loaded from a non-populated value

	// <fieldName>GetterHitRatio provides the ratio of hits to total getters
	// <fieldName>GetterMissRatio provides the ratio of misses to total getters


	// <className>GetterHit counts the number of getters that returns an already filled in object
	// <className>GetterMiss counts the number of getters that needed to be loaded from a non-populated object

	// <className>GetterHitRatio provides the ratio of hits to total getters
	// <className>GetterMissRatio provides the ratio of misses to total getters

	public static final Counter petIdPetGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "idPet", "getter", "hit"));
	public static final Counter petIdPetGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "idPet", "getter", "miss"));
	public static final RatioGauge petIdPetGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "idPet", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petIdPetGetterHit.getCount(), petIdPetGetterHit.getCount() + petIdPetGetterMiss.getCount()));}});
	public static final RatioGauge petIdPetGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "idPet", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petIdPetGetterMiss.getCount(), petIdPetGetterHit.getCount() + petIdPetGetterMiss.getCount()));}});
	public static final Counter petIdPetSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "idPet", "setter", "hit"));
	public static final Counter petIdPetSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "idPet", "setter", "miss"));
	public static final RatioGauge petIdPetSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "idPet", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petIdPetSetterHit.getCount(), petIdPetSetterHit.getCount() + petIdPetSetterMiss.getCount()));}});
	public static final RatioGauge petIdPetSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "idPet", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petIdPetSetterMiss.getCount(), petIdPetSetterHit.getCount() + petIdPetSetterMiss.getCount()));}});
	public static final Counter petNmPetGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "nmPet", "getter", "hit"));
	public static final Counter petNmPetGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "nmPet", "getter", "miss"));
	public static final RatioGauge petNmPetGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "nmPet", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNmPetGetterHit.getCount(), petNmPetGetterHit.getCount() + petNmPetGetterMiss.getCount()));}});
	public static final RatioGauge petNmPetGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "nmPet", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNmPetGetterMiss.getCount(), petNmPetGetterHit.getCount() + petNmPetGetterMiss.getCount()));}});
	public static final Counter petNmPetSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "nmPet", "setter", "hit"));
	public static final Counter petNmPetSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "nmPet", "setter", "miss"));
	public static final RatioGauge petNmPetSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "nmPet", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNmPetSetterHit.getCount(), petNmPetSetterHit.getCount() + petNmPetSetterMiss.getCount()));}});
	public static final RatioGauge petNmPetSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "nmPet", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNmPetSetterMiss.getCount(), petNmPetSetterHit.getCount() + petNmPetSetterMiss.getCount()));}});
	public static final Counter petNumAgeGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "numAge", "getter", "hit"));
	public static final Counter petNumAgeGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "numAge", "getter", "miss"));
	public static final RatioGauge petNumAgeGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "numAge", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNumAgeGetterHit.getCount(), petNumAgeGetterHit.getCount() + petNumAgeGetterMiss.getCount()));}});
	public static final RatioGauge petNumAgeGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "numAge", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNumAgeGetterMiss.getCount(), petNumAgeGetterHit.getCount() + petNumAgeGetterMiss.getCount()));}});
	public static final Counter petNumAgeSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "numAge", "setter", "hit"));
	public static final Counter petNumAgeSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "numAge", "setter", "miss"));
	public static final RatioGauge petNumAgeSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "numAge", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNumAgeSetterHit.getCount(), petNumAgeSetterHit.getCount() + petNumAgeSetterMiss.getCount()));}});
	public static final RatioGauge petNumAgeSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "numAge", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petNumAgeSetterMiss.getCount(), petNumAgeSetterHit.getCount() + petNumAgeSetterMiss.getCount()));}});
	public static final Counter petFltWeightGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "fltWeight", "getter", "hit"));
	public static final Counter petFltWeightGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "fltWeight", "getter", "miss"));
	public static final RatioGauge petFltWeightGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "fltWeight", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petFltWeightGetterHit.getCount(), petFltWeightGetterHit.getCount() + petFltWeightGetterMiss.getCount()));}});
	public static final RatioGauge petFltWeightGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "fltWeight", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petFltWeightGetterMiss.getCount(), petFltWeightGetterHit.getCount() + petFltWeightGetterMiss.getCount()));}});
	public static final Counter petFltWeightSetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "fltWeight", "setter", "hit"));
	public static final Counter petFltWeightSetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "fltWeight", "setter", "miss"));
	public static final RatioGauge petFltWeightSetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "fltWeight", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petFltWeightSetterHit.getCount(), petFltWeightSetterHit.getCount() + petFltWeightSetterMiss.getCount()));}});
	public static final RatioGauge petFltWeightSetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "fltWeight", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petFltWeightSetterMiss.getCount(), petFltWeightSetterHit.getCount() + petFltWeightSetterMiss.getCount()));}});
	public static final Counter petDtBirthdayGetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "dtBirthday", "getter", "hit"));
	public static final Counter petDtBirthdayGetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "dtBirthday", "getter", "miss"));
	public static final RatioGauge petDtBirthdayGetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "dtBirthday", "getter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petDtBirthdayGetterHit.getCount(), petDtBirthdayGetterHit.getCount() + petDtBirthdayGetterMiss.getCount()));}});
	public static final RatioGauge petDtBirthdayGetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "dtBirthday", "getter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petDtBirthdayGetterMiss.getCount(), petDtBirthdayGetterHit.getCount() + petDtBirthdayGetterMiss.getCount()));}});
	public static final Counter petDtBirthdaySetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "dtBirthday", "setter", "hit"));
	public static final Counter petDtBirthdaySetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "dtBirthday", "setter", "miss"));
	public static final RatioGauge petDtBirthdaySetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "dtBirthday", "Setter", "hit", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petDtBirthdaySetterHit.getCount(), petDtBirthdaySetterHit.getCount() + petDtBirthdaySetterMiss.getCount()));}});
	public static final RatioGauge petDtBirthdaySetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name(Pet.class, "dtBirthday", "Setter", "miss", "ratio"), new RatioGauge() { protected Ratio getRatio() { return(Ratio.of(petDtBirthdaySetterMiss.getCount(), petDtBirthdaySetterHit.getCount() + petDtBirthdaySetterMiss.getCount()));}});

	// now for the table statistics
	public static final Counter petAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "access"));
	public static final Counter petFinderAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "finder", "access"));
	public static final Counter petCounterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "counter", "access"));
	public static final Counter petQuestionAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "question", "access"));
	public static final Counter petDeleterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "deleter", "access"));
	public static final Counter petInserterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "inserter", "access"));
	public static final Counter petUpdaterAccess = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "updater", "access"));
	public static final Counter petInsert = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "insert"));
	public static final Counter petInsertOrUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "insertOrUpdate"));
	public static final Counter petDelete = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "delete"));
	public static final Counter petEnsure = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "ensure"));
	public static final Counter petRefresh = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "refresh"));
	public static final Counter petUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name(Pet.class, "update"));

}