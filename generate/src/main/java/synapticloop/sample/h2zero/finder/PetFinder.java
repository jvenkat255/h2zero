package synapticloop.sample.h2zero.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-finder.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;

import synapticloop.h2zero.base.exception.H2ZeroFinderException;
import synapticloop.h2zero.base.manager.ConnectionManager;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import synapticloop.sample.h2zero.model.util.Constants;

import synapticloop.sample.h2zero.model.Pet;
public class PetFinder {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.PET_BINDER;

	private static final Logger LOGGER = Logger.getLogger(PetFinder.class);
	private static final String SQL_SELECT_START = "select id_pet, nm_pet, num_age, flt_weight, dt_birthday from pet";
	private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where id_pet = ?";
	private static final String SQL_BUILTIN_PRIMARY_KEY_EXISTS = "select count(*) from pet where id_pet = ?";


	private static Map<String, String> findAll_limit_statement_cache = new HashMap<String, String>();
	private PetFinder() {}

	/**
	 * Find a Pet by its primary key
	 * 
	 * @param connection the connection item
	 * @param idPet the primary key
	 * 
	 * @return the unique result or throw an exception if one couldn't be found
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static Pet findByPrimaryKey(Connection connection, Long idPet) throws H2ZeroFinderException {
		Pet pet = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		if(null == idPet) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idPet] was null.");
		}

		try {
			preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);
			preparedStatement.setLong(1, idPet);
			resultSet = preparedStatement.executeQuery();
			pet = uniqueResult(resultSet);
		} catch (SQLException sqlex) {
			throw new H2ZeroFinderException(sqlex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [idPet:" + idPet + "].");
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}

		if(null == pet) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idPet:" + idPet + "].");
		}
		return(pet);
	}

	/**
	 * Find a Pet by its primary key
	 * 
	 * @param idPet the primary key
	 * 
	 * @return the unique result or throw an exception if one coudn't be found.
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static Pet findByPrimaryKey(Long idPet) throws H2ZeroFinderException {
		Pet pet = null;
		Connection connection = null;

		if(null == idPet) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idPet] was null.");
		}

		try {
			connection = ConnectionManager.getConnection();
			pet = findByPrimaryKey(connection, idPet);
		} catch (SQLException sqlex) {
			throw new H2ZeroFinderException(sqlex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [idPet:" + idPet + "].");
		} finally {
			ConnectionManager.closeAll(connection);
		}

		if(null == pet) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idPet:" + idPet + "].");
		}
		return(pet);
	}

	/**
	 * Find a Pet by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param connection the connection item
	 * @param idPet the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static Pet findByPrimaryKeySilent(Connection connection, Long idPet) {
		try {
			return(findByPrimaryKey(connection, idPet));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isEnabledFor(Level.WARN)) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idPet + "): " + h2zfex.getMessage());
				if(LOGGER.isEnabledFor(Level.DEBUG)) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find a Pet by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param idPet the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static Pet findByPrimaryKeySilent(Long idPet) {
		try {
			return(findByPrimaryKey(idPet));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isEnabledFor(Level.WARN)) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idPet + "): " + h2zfex.getMessage());
				if(LOGGER.isEnabledFor(Level.DEBUG)) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find all Pet objects
	 * 
	 * @return a list of all of the Pet objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Pet> findAll(Integer limit, Integer offset) throws SQLException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Connection connection = null;
		List<Pet> results = new ArrayList<Pet>();

		try {
			connection = ConnectionManager.getConnection();
			preparedStatement = connection.prepareStatement(SQL_SELECT_START);
			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch(SQLException sqlex) {
			if(LOGGER.isEnabledFor(Level.WARN)) {
				LOGGER.warn("SQLException findAll(): " + sqlex.getMessage());
				if(LOGGER.isEnabledFor(Level.DEBUG)) {
					sqlex.printStackTrace();
				}
			}
			throw sqlex;
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement, connection);
		}

		return(results);
	}

	public static List<Pet> findAll() throws SQLException {
		return(findAll(null, null));
	}
	public static List<Pet> findAllSilent() {
		try {
			return(findAll());
		} catch(SQLException sqlex){
			if(LOGGER.isEnabledFor(Level.WARN)) {
				LOGGER.warn("SQLException findAllSilent(): " + sqlex.getMessage());
				if(LOGGER.isEnabledFor(Level.DEBUG)) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Pet>());
		}
	}

	/**
	 * Return a unique result for the query - in effect just the first result of
	 * query.
	 * 
	 * @param resultSet The result set of the query
	 * 
	 * @return The Pet that represents this result
	 * 
	 * @throws H2ZeroFinderException if no results were found
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static Pet uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {
		if(resultSet.first()) {
			// we have a result
			Long idPet = resultSet.getLong(1);
			Boolean nmPet = resultSet.getBoolean(2);
			if(resultSet.wasNull()) {
				nmPet = null;
			}
			Integer numAge = resultSet.getInt(3);
			Float fltWeight = resultSet.getFloat(4);
			if(resultSet.wasNull()) {
				fltWeight = null;
			}
			Date dtBirthday = resultSet.getDate(5);
			if(resultSet.wasNull()) {
				dtBirthday = null;
			}

			Pet pet = new Pet(idPet, nmPet, numAge, fltWeight, dtBirthday);

			if(resultSet.next()) {
				throw new H2ZeroFinderException("More than one result in resultset for unique finder.");
			} else {
				return(pet);
			}
		} else {
			// could not get a result
			return(null);
		}
	}

	/**
	 * Return the results as a list of Pet, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of Pet
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<Pet> list(ResultSet resultSet) throws SQLException {
		List<Pet> arrayList = new ArrayList<Pet>();
		while(resultSet.next()) {
			arrayList.add(new Pet(
					resultSet.getLong(1),
					ConnectionManager.getNullableResultBoolean(resultSet, 2),
					resultSet.getInt(3),
					ConnectionManager.getNullableResultFloat(resultSet, 4),
					ConnectionManager.getNullableResultDate(resultSet, 5)));
		}
		return(arrayList);
	}

}