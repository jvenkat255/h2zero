package synapticloop.sample.h2zero.servlet;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//         (java-create-metrics-servlet-munin.templar)


import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.SortedMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.codahale.metrics.MetricRegistry;

import synapticloop.h2zero.base.manager.MetricsManager;

import com.codahale.metrics.Metric;
import com.codahale.metrics.Counter;
import com.codahale.metrics.Gauge;
import com.codahale.metrics.Histogram;
import com.codahale.metrics.Meter;
import com.codahale.metrics.RatioGauge;
import com.codahale.metrics.Timer;


import static synapticloop.sample.h2zero.metrics.UserTypeMetrics.*;
import static synapticloop.sample.h2zero.metrics.UserMetrics.*;
import static synapticloop.sample.h2zero.metrics.PetMetrics.*;
import static synapticloop.sample.h2zero.metrics.UserPetMetrics.*;

@SuppressWarnings("serial")
public class MuninMetricsServlet extends HttpServlet {
	private static final int LIST_METRICS_ALL = Integer.MAX_VALUE;
	private static final int LIST_METRICS_GAUGES = Integer.MAX_VALUE - 1;
	private static final int LIST_METRICS_TIMERS = Integer.MAX_VALUE - 2;
	private static final int LIST_METRICS_HISTOGRAMS = Integer.MAX_VALUE - 3;
	private static final int LIST_METRICS_COUNTERS = Integer.MAX_VALUE - 4;
	private static final int LIST_METRICS_METERS = Integer.MAX_VALUE - 5;

	private static final int GET_METRICS_TABLES = Integer.MAX_VALUE - 1000;
	private static final int GET_METRICS_TABLES_RATIO = Integer.MAX_VALUE - 1001;
	private static final int GET_METRICS_TABLES_INTERACTION_RATIO = Integer.MAX_VALUE - 1002;
	private static final int GET_METRICS_TABLES_INTERACTION_RATIO_user_type = Integer.MAX_VALUE - 10000 - 1;
	private static final int GET_METRICS_TABLES_INTERACTION_RATIO_user = Integer.MAX_VALUE - 10000 - 2;
	private static final int GET_METRICS_TABLES_INTERACTION_RATIO_pet = Integer.MAX_VALUE - 10000 - 3;
	private static final int GET_METRICS_TABLES_INTERACTION_RATIO_user_pet = Integer.MAX_VALUE - 10000 - 4;

	private static HashMap<String, Integer> METHOD_LOOKUP = new HashMap<String, Integer>();
	static {
		METHOD_LOOKUP.put("/list-metrics/all/", LIST_METRICS_ALL);
		METHOD_LOOKUP.put("/list-metrics/gauges/", LIST_METRICS_GAUGES);
		METHOD_LOOKUP.put("/list-metrics/timers/", LIST_METRICS_TIMERS);
		METHOD_LOOKUP.put("/list-metrics/histograms/", LIST_METRICS_HISTOGRAMS);
		METHOD_LOOKUP.put("/list-metrics/counters/", LIST_METRICS_COUNTERS);
		METHOD_LOOKUP.put("/list-metrics/meters/", LIST_METRICS_METERS);
		METHOD_LOOKUP.put("/get-metrics/tables/ratio/", GET_METRICS_TABLES_RATIO);
		METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/", GET_METRICS_TABLES_INTERACTION_RATIO);
		METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/user_type/", GET_METRICS_TABLES_INTERACTION_RATIO_user_type);
		METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/user/", GET_METRICS_TABLES_INTERACTION_RATIO_user);
		METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/pet/", GET_METRICS_TABLES_INTERACTION_RATIO_pet);
		METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/user_pet/", GET_METRICS_TABLES_INTERACTION_RATIO_user_pet);

		METHOD_LOOKUP.put("/get-metrics/tables/", GET_METRICS_TABLES);
	}

	protected void doGet(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException {
		String pathInfo = httpServletRequest.getPathInfo();
		PrintWriter printWriter = httpServletResponse.getWriter();

		if(pathInfo.equals("/")) {
			// just print out the list of URLs that are available
			Iterator<String> iterator = METHOD_LOOKUP.keySet().iterator();
			while (iterator.hasNext()) {
				String url = (String) iterator.next();
				printWriter.write(url + "\n");
			}
			return;
		}
		boolean isConfig = false;

		if(pathInfo.endsWith("/config/")) {
			pathInfo = pathInfo.substring(0, pathInfo.lastIndexOf("config/"));
			isConfig = true;
		}

		if(METHOD_LOOKUP.containsKey(pathInfo)) {
			switch(METHOD_LOOKUP.get(pathInfo)) {
			case LIST_METRICS_ALL:
				listAllMetrics(printWriter);
				break;
			case LIST_METRICS_GAUGES:
				listGauges(printWriter);
				break;
			case LIST_METRICS_TIMERS:
				listTimers(printWriter);
				break;
			case LIST_METRICS_HISTOGRAMS:
				listHistograms(printWriter);
				break;
			case LIST_METRICS_COUNTERS:
				listCounters(printWriter);
				break;
			case LIST_METRICS_METERS:
				listMeters(printWriter);
				break;
			case GET_METRICS_TABLES:
				listTables(printWriter, isConfig);
				break;
			case GET_METRICS_TABLES_RATIO:
				listTablesRatio(printWriter, isConfig);
				break;
			case GET_METRICS_TABLES_INTERACTION_RATIO:
				listTablesInteractionRatio(printWriter, isConfig);
				break;
			case GET_METRICS_TABLES_INTERACTION_RATIO_user_type:
				listTablesInteractionRatioUserType(printWriter, isConfig);
				break;
			case GET_METRICS_TABLES_INTERACTION_RATIO_user:
				listTablesInteractionRatioUser(printWriter, isConfig);
				break;
			case GET_METRICS_TABLES_INTERACTION_RATIO_pet:
				listTablesInteractionRatioPet(printWriter, isConfig);
				break;
			case GET_METRICS_TABLES_INTERACTION_RATIO_user_pet:
				listTablesInteractionRatioUserPet(printWriter, isConfig);
				break;
			default:
				// unlikely to happen
			}
		} else {
			// try and lookup the metric
			printMetric(pathInfo, printWriter);
		}
		printWriter.flush();
		printWriter.close();
	}

	private void printMetric(String pathInfo, PrintWriter printWriter) {
		MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();
		int indexOf = pathInfo.indexOf("/config");
		if(indexOf != -1) {
			String metricName = pathInfo.substring(1, indexOf);
			if(metricsRegistry.getMetrics().containsKey(metricName)) {
				// write out the configuration for this metric
				Metric metric = metricsRegistry.getMetrics().get(metricName);
				if(metric instanceof RatioGauge) {
					printWriter.write("graph_title RatioGauge for " + metricName + "\n");
					printWriter.write("graph_vlabel Ratio" + "\n");
					printWriter.write("graph_category metrics\n");
					printWriter.write("RATIOGAUGE.label " + metricName + "\n");
					printWriter.write("RATIONGAUGE.draw LINE\n");
					printWriter.write("graph_args -l 0 \n");
				} else if(metric instanceof Gauge) {
					printWriter.write("graph_title Gauge for " + metricName + "\n");
					printWriter.write("graph_vlabel gauge\n");
					printWriter.write("graph_category metrics\n");
					printWriter.write("GAUGE.label " + metricName + "\n");
					printWriter.write("GAUGE.draw LINE\n");
					printWriter.write("graph_args -l 0 \n");
				} else if(metric instanceof Timer) {
					printWriter.write("graph_title Timer for " + metricName + "\n");
					printWriter.write("graph_vlabel timer\n");
					printWriter.write("graph_category metrics\n");
					printWriter.write("TIMER.label " + metricName + "\n");
					printWriter.write("TIMER.draw LINE\n");
					printWriter.write("graph_args -l 0 \n");
				} else if(metric instanceof Histogram) {
					
				} else if(metric instanceof Counter) {
					
				} else if(metric instanceof Meter) {
					
				}
			} else {
				printWriter.write("err\n");
			}
		}
	}

	private void listTables(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Access for tables");
				printWriter.write("graph_vlabel access count");
				printWriter.write("graph_category metrics");
				printWriter.write("user_type.label user_type\n");
				printWriter.write("user_type.draw LINE\n");
				printWriter.write("user.label user\n");
				printWriter.write("user.draw LINE\n");
				printWriter.write("pet.label pet\n");
				printWriter.write("pet.draw LINE\n");
				printWriter.write("user_pet.label user_pet\n");
				printWriter.write("user_pet.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
				printWriter.write("user_type.value " + userTypeAccess.getCount() + "\n");
				printWriter.write("user.value " + userAccess.getCount() + "\n");
				printWriter.write("pet.value " + petAccess.getCount() + "\n");
				printWriter.write("user_pet.value " + userPetAccess.getCount() + "\n");
		}
	}

	private void listTablesRatio(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Access ratio for tables\n");
				printWriter.write("graph_vlabel access count\n");
				printWriter.write("graph_category metrics\n");
				printWriter.write("user_type.label user_type\n");
				printWriter.write("user_type.draw LINE\n");
				printWriter.write("user.label user\n");
				printWriter.write("user.draw LINE\n");
				printWriter.write("pet.label pet\n");
				printWriter.write("pet.draw LINE\n");
				printWriter.write("user_pet.label user_pet\n");
				printWriter.write("user_pet.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
			long allAccesses = 0;
			allAccesses += userTypeAccess.getCount();
			allAccesses += userAccess.getCount();
			allAccesses += petAccess.getCount();
			allAccesses += userPetAccess.getCount();
			if(allAccesses == 0) {
				allAccesses = 1;
			}

				printWriter.write("user_type.value " + (userTypeAccess.getCount()*100)/allAccesses + "\n");
				printWriter.write("user.value " + (userAccess.getCount()*100)/allAccesses + "\n");
				printWriter.write("pet.value " + (petAccess.getCount()*100)/allAccesses + "\n");
				printWriter.write("user_pet.value " + (userPetAccess.getCount()*100)/allAccesses + "\n");
		}
	}

	private void listTablesInteractionRatio(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Interaction access ratio for tables\n");
				printWriter.write("graph_vlabel access count\n");
				printWriter.write("graph_category metrics\n");
				printWriter.write("user_typeFinder.label user_type Finders\n");
				printWriter.write("user_typeFinder.draw LINE\n");
				printWriter.write("user_typeCounter.label user_type Counters\n");
				printWriter.write("user_typeCounter.draw LINE\n");
				printWriter.write("user_typeQuestion.label user_type Questions\n");
				printWriter.write("user_typeQuestion.draw LINE\n");
				printWriter.write("user_typeDeleter.label user_type Deleters\n");
				printWriter.write("user_typeDeleter.draw LINE\n");
				printWriter.write("user_typeInserter.label user_type Inserters\n");
				printWriter.write("user_typeInserter.draw LINE\n");
				printWriter.write("user_typeUpdater.label user_type Updaters\n");
				printWriter.write("user_typeUpdater.draw LINE\n");
				printWriter.write("userFinder.label user Finders\n");
				printWriter.write("userFinder.draw LINE\n");
				printWriter.write("userCounter.label user Counters\n");
				printWriter.write("userCounter.draw LINE\n");
				printWriter.write("userQuestion.label user Questions\n");
				printWriter.write("userQuestion.draw LINE\n");
				printWriter.write("userDeleter.label user Deleters\n");
				printWriter.write("userDeleter.draw LINE\n");
				printWriter.write("userInserter.label user Inserters\n");
				printWriter.write("userInserter.draw LINE\n");
				printWriter.write("userUpdater.label user Updaters\n");
				printWriter.write("userUpdater.draw LINE\n");
				printWriter.write("petFinder.label pet Finders\n");
				printWriter.write("petFinder.draw LINE\n");
				printWriter.write("petCounter.label pet Counters\n");
				printWriter.write("petCounter.draw LINE\n");
				printWriter.write("petQuestion.label pet Questions\n");
				printWriter.write("petQuestion.draw LINE\n");
				printWriter.write("petDeleter.label pet Deleters\n");
				printWriter.write("petDeleter.draw LINE\n");
				printWriter.write("petInserter.label pet Inserters\n");
				printWriter.write("petInserter.draw LINE\n");
				printWriter.write("petUpdater.label pet Updaters\n");
				printWriter.write("petUpdater.draw LINE\n");
				printWriter.write("user_petFinder.label user_pet Finders\n");
				printWriter.write("user_petFinder.draw LINE\n");
				printWriter.write("user_petCounter.label user_pet Counters\n");
				printWriter.write("user_petCounter.draw LINE\n");
				printWriter.write("user_petQuestion.label user_pet Questions\n");
				printWriter.write("user_petQuestion.draw LINE\n");
				printWriter.write("user_petDeleter.label user_pet Deleters\n");
				printWriter.write("user_petDeleter.draw LINE\n");
				printWriter.write("user_petInserter.label user_pet Inserters\n");
				printWriter.write("user_petInserter.draw LINE\n");
				printWriter.write("user_petUpdater.label user_pet Updaters\n");
				printWriter.write("user_petUpdater.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
			long finderAccesses = 0;
			long counterAccesses = 0;
			long questionAccesses = 0;
			long deleterAccesses = 0;
			long inserterAccesses = 0;
			long updaterAccesses = 0;

			finderAccesses += userTypeFinderAccess.getCount();
			counterAccesses += userTypeCounterAccess.getCount();
			questionAccesses += userTypeQuestionAccess.getCount();
			deleterAccesses += userTypeDeleterAccess.getCount();
			inserterAccesses += userTypeInserterAccess.getCount();
			updaterAccesses += userTypeUpdaterAccess.getCount();
			finderAccesses += userFinderAccess.getCount();
			counterAccesses += userCounterAccess.getCount();
			questionAccesses += userQuestionAccess.getCount();
			deleterAccesses += userDeleterAccess.getCount();
			inserterAccesses += userInserterAccess.getCount();
			updaterAccesses += userUpdaterAccess.getCount();
			finderAccesses += petFinderAccess.getCount();
			counterAccesses += petCounterAccess.getCount();
			questionAccesses += petQuestionAccess.getCount();
			deleterAccesses += petDeleterAccess.getCount();
			inserterAccesses += petInserterAccess.getCount();
			updaterAccesses += petUpdaterAccess.getCount();
			finderAccesses += userPetFinderAccess.getCount();
			counterAccesses += userPetCounterAccess.getCount();
			questionAccesses += userPetQuestionAccess.getCount();
			deleterAccesses += userPetDeleterAccess.getCount();
			inserterAccesses += userPetInserterAccess.getCount();
			updaterAccesses += userPetUpdaterAccess.getCount();

			if(finderAccesses == 0) { finderAccesses = 1; }
			if(counterAccesses == 0) { counterAccesses = 1; }
			if(questionAccesses == 0) { questionAccesses = 1; }
			if(deleterAccesses == 0) { deleterAccesses = 1; }
			if(inserterAccesses == 0) { inserterAccesses = 1; }
			if(updaterAccesses == 0) { updaterAccesses = 1; }

			printWriter.write("user_typeFinder.value " + (userTypeFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("user_typeCounter.value " + (userTypeCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("user_typeQuestion.value " + (userTypeQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("user_typeDeleter.value " + (userTypeDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("user_typeInserter.value " + (userTypeInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("user_typeUpdater.value " + (userTypeUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
			printWriter.write("userFinder.value " + (userFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("userCounter.value " + (userCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("userQuestion.value " + (userQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("userDeleter.value " + (userDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("userInserter.value " + (userInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("userUpdater.value " + (userUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
			printWriter.write("petFinder.value " + (petFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("petCounter.value " + (petCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("petQuestion.value " + (petQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("petDeleter.value " + (petDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("petInserter.value " + (petInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("petUpdater.value " + (petUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
			printWriter.write("user_petFinder.value " + (userPetFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("user_petCounter.value " + (userPetCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("user_petQuestion.value " + (userPetQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("user_petDeleter.value " + (userPetDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("user_petInserter.value " + (userPetInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("user_petUpdater.value " + (userPetUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
		}
	}

	private void listTablesInteractionRatioUserType(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Interaction access ratio for table user_type\n");
				printWriter.write("graph_vlabel access count\n");
				printWriter.write("graph_category metrics\n");
				printWriter.write("user_typeFinder.label user_type Finders\n");
				printWriter.write("user_typeFinder.draw LINE\n");
				printWriter.write("user_typeCounter.label user_type Counters\n");
				printWriter.write("user_typeCounter.draw LINE\n");
				printWriter.write("user_typeQuestion.label user_type Questions\n");
				printWriter.write("user_typeQuestion.draw LINE\n");
				printWriter.write("user_typeDeleter.label user_type Deleters\n");
				printWriter.write("user_typeDeleter.draw LINE\n");
				printWriter.write("user_typeInserter.label user_type Inserters\n");
				printWriter.write("user_typeInserter.draw LINE\n");
				printWriter.write("user_typeUpdater.label user_type Updaters\n");
				printWriter.write("user_typeUpdater.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
			long finderAccesses = 0;
			long counterAccesses = 0;
			long questionAccesses = 0;
			long deleterAccesses = 0;
			long inserterAccesses = 0;
			long updaterAccesses = 0;

			finderAccesses += userTypeFinderAccess.getCount();
			counterAccesses += userTypeCounterAccess.getCount();
			questionAccesses += userTypeQuestionAccess.getCount();
			deleterAccesses += userTypeDeleterAccess.getCount();
			inserterAccesses += userTypeInserterAccess.getCount();
			updaterAccesses += userTypeUpdaterAccess.getCount();

			if(finderAccesses == 0) { finderAccesses = 1; }
			if(counterAccesses == 0) { counterAccesses = 1; }
			if(questionAccesses == 0) { questionAccesses = 1; }
			if(deleterAccesses == 0) { deleterAccesses = 1; }
			if(inserterAccesses == 0) { inserterAccesses = 1; }
			if(updaterAccesses == 0) { updaterAccesses = 1; }

			printWriter.write("user_typeFinder.value " + (userTypeFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("user_typeCounter.value " + (userTypeCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("user_typeQuestion.value " + (userTypeQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("user_typeDeleter.value " + (userTypeDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("user_typeInserter.value " + (userTypeInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("user_typeUpdater.value " + (userTypeUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
		}
	}

	private void listTablesInteractionRatioUser(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Interaction access ratio for table user\n");
				printWriter.write("graph_vlabel access count\n");
				printWriter.write("graph_category metrics\n");
				printWriter.write("userFinder.label user Finders\n");
				printWriter.write("userFinder.draw LINE\n");
				printWriter.write("userCounter.label user Counters\n");
				printWriter.write("userCounter.draw LINE\n");
				printWriter.write("userQuestion.label user Questions\n");
				printWriter.write("userQuestion.draw LINE\n");
				printWriter.write("userDeleter.label user Deleters\n");
				printWriter.write("userDeleter.draw LINE\n");
				printWriter.write("userInserter.label user Inserters\n");
				printWriter.write("userInserter.draw LINE\n");
				printWriter.write("userUpdater.label user Updaters\n");
				printWriter.write("userUpdater.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
			long finderAccesses = 0;
			long counterAccesses = 0;
			long questionAccesses = 0;
			long deleterAccesses = 0;
			long inserterAccesses = 0;
			long updaterAccesses = 0;

			finderAccesses += userFinderAccess.getCount();
			counterAccesses += userCounterAccess.getCount();
			questionAccesses += userQuestionAccess.getCount();
			deleterAccesses += userDeleterAccess.getCount();
			inserterAccesses += userInserterAccess.getCount();
			updaterAccesses += userUpdaterAccess.getCount();

			if(finderAccesses == 0) { finderAccesses = 1; }
			if(counterAccesses == 0) { counterAccesses = 1; }
			if(questionAccesses == 0) { questionAccesses = 1; }
			if(deleterAccesses == 0) { deleterAccesses = 1; }
			if(inserterAccesses == 0) { inserterAccesses = 1; }
			if(updaterAccesses == 0) { updaterAccesses = 1; }

			printWriter.write("userFinder.value " + (userFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("userCounter.value " + (userCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("userQuestion.value " + (userQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("userDeleter.value " + (userDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("userInserter.value " + (userInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("userUpdater.value " + (userUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
		}
	}

	private void listTablesInteractionRatioPet(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Interaction access ratio for table pet\n");
				printWriter.write("graph_vlabel access count\n");
				printWriter.write("graph_category metrics\n");
				printWriter.write("petFinder.label pet Finders\n");
				printWriter.write("petFinder.draw LINE\n");
				printWriter.write("petCounter.label pet Counters\n");
				printWriter.write("petCounter.draw LINE\n");
				printWriter.write("petQuestion.label pet Questions\n");
				printWriter.write("petQuestion.draw LINE\n");
				printWriter.write("petDeleter.label pet Deleters\n");
				printWriter.write("petDeleter.draw LINE\n");
				printWriter.write("petInserter.label pet Inserters\n");
				printWriter.write("petInserter.draw LINE\n");
				printWriter.write("petUpdater.label pet Updaters\n");
				printWriter.write("petUpdater.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
			long finderAccesses = 0;
			long counterAccesses = 0;
			long questionAccesses = 0;
			long deleterAccesses = 0;
			long inserterAccesses = 0;
			long updaterAccesses = 0;

			finderAccesses += petFinderAccess.getCount();
			counterAccesses += petCounterAccess.getCount();
			questionAccesses += petQuestionAccess.getCount();
			deleterAccesses += petDeleterAccess.getCount();
			inserterAccesses += petInserterAccess.getCount();
			updaterAccesses += petUpdaterAccess.getCount();

			if(finderAccesses == 0) { finderAccesses = 1; }
			if(counterAccesses == 0) { counterAccesses = 1; }
			if(questionAccesses == 0) { questionAccesses = 1; }
			if(deleterAccesses == 0) { deleterAccesses = 1; }
			if(inserterAccesses == 0) { inserterAccesses = 1; }
			if(updaterAccesses == 0) { updaterAccesses = 1; }

			printWriter.write("petFinder.value " + (petFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("petCounter.value " + (petCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("petQuestion.value " + (petQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("petDeleter.value " + (petDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("petInserter.value " + (petInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("petUpdater.value " + (petUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
		}
	}

	private void listTablesInteractionRatioUserPet(PrintWriter printWriter, boolean isConfig) {
		if(isConfig) {
			//  we are doing the configuration item
				printWriter.write("graph_title Interaction access ratio for table user_pet\n");
				printWriter.write("graph_vlabel access count\n");
				printWriter.write("graph_category metrics\n");
				printWriter.write("user_petFinder.label user_pet Finders\n");
				printWriter.write("user_petFinder.draw LINE\n");
				printWriter.write("user_petCounter.label user_pet Counters\n");
				printWriter.write("user_petCounter.draw LINE\n");
				printWriter.write("user_petQuestion.label user_pet Questions\n");
				printWriter.write("user_petQuestion.draw LINE\n");
				printWriter.write("user_petDeleter.label user_pet Deleters\n");
				printWriter.write("user_petDeleter.draw LINE\n");
				printWriter.write("user_petInserter.label user_pet Inserters\n");
				printWriter.write("user_petInserter.draw LINE\n");
				printWriter.write("user_petUpdater.label user_pet Updaters\n");
				printWriter.write("user_petUpdater.draw LINE\n");
				printWriter.write("graph_args -l 0 ");
		} else {
			// we are printing out the details
			long finderAccesses = 0;
			long counterAccesses = 0;
			long questionAccesses = 0;
			long deleterAccesses = 0;
			long inserterAccesses = 0;
			long updaterAccesses = 0;

			finderAccesses += userPetFinderAccess.getCount();
			counterAccesses += userPetCounterAccess.getCount();
			questionAccesses += userPetQuestionAccess.getCount();
			deleterAccesses += userPetDeleterAccess.getCount();
			inserterAccesses += userPetInserterAccess.getCount();
			updaterAccesses += userPetUpdaterAccess.getCount();

			if(finderAccesses == 0) { finderAccesses = 1; }
			if(counterAccesses == 0) { counterAccesses = 1; }
			if(questionAccesses == 0) { questionAccesses = 1; }
			if(deleterAccesses == 0) { deleterAccesses = 1; }
			if(inserterAccesses == 0) { inserterAccesses = 1; }
			if(updaterAccesses == 0) { updaterAccesses = 1; }

			printWriter.write("user_petFinder.value " + (userPetFinderAccess.getCount()*100)/finderAccesses + "\n");
			printWriter.write("user_petCounter.value " + (userPetCounterAccess.getCount()*100)/counterAccesses + "\n");
			printWriter.write("user_petQuestion.value " + (userPetQuestionAccess.getCount()*100)/questionAccesses + "\n");
			printWriter.write("user_petDeleter.value " + (userPetDeleterAccess.getCount()*100)/deleterAccesses + "\n");
			printWriter.write("user_petInserter.value " + (userPetInserterAccess.getCount()*100)/inserterAccesses + "\n");
			printWriter.write("user_petUpdater.value " + (userPetUpdaterAccess.getCount()*100)/updaterAccesses + "\n");
		}
	}

	private void listAllMetrics(PrintWriter printWriter) throws IOException {
		listCounters(printWriter);

		listGauges(printWriter);

		listHistograms(printWriter);

		listMeters(printWriter);

		listTimers(printWriter);
	}

	private void listTimers(PrintWriter printWriter) {
		MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();
		SortedMap<String, Timer> timers = metricsRegistry.getTimers();
		Iterator<String> iterator = timers.keySet().iterator();
		while (iterator.hasNext()) {
			String timer = (String) iterator.next();
			printWriter.write(timer + "\n");
		}
	}

	private void listMeters(PrintWriter printWriter) {
		MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();
		SortedMap<String, Meter> meters = metricsRegistry.getMeters();
		Iterator<String> iterator = meters.keySet().iterator();
		while (iterator.hasNext()) {
			String meter = (String) iterator.next();
			printWriter.write(meter + "\n");
		}
	}

	private void listHistograms(PrintWriter printWriter) {
		MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();
		SortedMap<String, Histogram> histograms = metricsRegistry.getHistograms();
		Iterator<String> iterator = histograms.keySet().iterator();
		while (iterator.hasNext()) {
			String histogram = (String) iterator.next();
			printWriter.write(histogram + "\n");
		}
	}

	private void listCounters(PrintWriter printWriter) {
		MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();
		SortedMap<String, Counter> counters = metricsRegistry.getCounters();
		Iterator<String> iterator = counters.keySet().iterator();
		while (iterator.hasNext()) {
			String counter = (String) iterator.next();
			printWriter.write(counter + "\n");
		}
	}

	@SuppressWarnings("rawtypes")
	private void listGauges(PrintWriter printWriter) {
		MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();
		SortedMap<String, Gauge> gauges = metricsRegistry.getGauges();
		Iterator<String> gaugeIterator = gauges.keySet().iterator();
		while (gaugeIterator.hasNext()) {
			String gauge = (String) gaugeIterator.next();
			printWriter.write(gauge + "\n");
		}
	}

}
