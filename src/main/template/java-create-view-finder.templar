{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.finder;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//               (java-create-view-finder.templar){\n}{\n}

{import classpath:/snippet/global/finder-imports.templar}

import {database.package}.view.{view.javaClassName};{\n}
{\n}

public class {view.javaClassName}ViewFinder {{{\n}

{\t}private static final Logger LOGGER = Logger.getLogger({view.javaClassName}ViewFinder.class);{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIRST UP THE FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}private static final String SQL_SELECT_START = "select 
{loop view.fields as field}
	{field.name}
	{if !fieldStatus.last}, {endif}
{endloop}
 from {view.name}";{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDER FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}


{loop view.fields as field}
	{if field.primary}
		{set field.name as primaryFieldName}
		{set field.javaName as primaryFieldJavaName}
	{endif}
{endloop}

{loop view.finders as finder}
	{\t}private static final String SQL_{finder.staticName} = SQL_SELECT_START
	{if fn:notNull[finder.whereClause]} + " {finder.whereClause}"{endif}
	{if fn:notNull[finder.orderBy]} + " order by {finder.orderBy}"{endif};{\n}
{endloop}
{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND ALL
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Find all {view.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @return a list of all of the {view.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static List<{view.javaClassName}> findAll() throws SQLException {{{\n}

{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\t}{\t}Connection connection = null;{\n}
{\t}{\t}List<{view.javaClassName}> results = new ArrayList<{view.javaClassName}>();{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_SELECT_START);{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}results = list(resultSet);{\n}
{\t}{\t}} catch(SQLException sqlex) {{{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
{\t}{\t}}{\n}
{\n}

{\t}{\t}return(results);{\n}
{\t}}{\n}
{\n}

{\t}public static List<{view.javaClassName}> findAllSilent() {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findAll());{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}LOGGER.warn("SQLException: " + sqlex.getMessage());{\n}
{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(new ArrayList<{view.javaClassName}>());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{set view as tableOrView}
{import classpath:/snippet/finder/user-finders.templar}
}

