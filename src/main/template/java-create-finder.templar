{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.finder;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//                (java-create-finder.templar){\n}{\n}

{import classpath:/snippet/global/finder-imports.templar}

public class {table.javaClassName}Finder {{{\n}
{set table as baseSchemaObject}
{import classpath:/snippet/global/java-binder-declaration.templar}
{\t}private static final Logger LOGGER = Logger.getLogger({table.javaClassName}Finder.class);{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIRST UP THE FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}private static final String SQL_SELECT_START = "select 
{loop table.fields as field}
	{field.name}
	{if !fieldStatus.last}, {endif}
{endloop}
 from {table.name}";{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDER FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}


{loop table.fields as field}
	{if field.primary}
		{set field.name as primaryFieldName}
		{set field.javaName as primaryFieldJavaName}
	{endif}
{endloop}

{\t}private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where {primaryFieldName} = ?";{\n}
{\t}private static final String SQL_BUILTIN_PRIMARY_KEY_EXISTS = "select count(*) from {table.name} where {primaryFieldName} = ?";{\n}
{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDERS FOR THE SELECT CLAUSES AND NORMAL CLAUSES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if fn:null[finder.selectClause]}
		{\t}private static final String SQL_{finder.staticName} = SQL_SELECT_START
	{else}
		{\t}private static final String SQL_{finder.staticName} = "{finder.selectClause}"
	{endif}

	{if fn:notNull[finder.whereClause]} + " {finder.whereClause}"{endif}
	{if fn:notNull[finder.orderBy]} + " order by {finder.orderBy}"{endif};{\n}
{endloop}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDERS FOR THE SELECT CLAUSES CACHES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if finder.hasInFields}
		{\t}private static HashMap<String, String> {finder.name}_statement_cache = new HashMap<String, String>();{\n}
	{endif}
{endloop}

		{\t}private static HashMap<String, String> findAll_limit_statement_cache = new HashMap<String, String>();{\n}

{loop table.finders as finder}
	{if fn:null[finder.selectClause]}
		{\t}private static HashMap<String, String> {finder.name}_limit_statement_cache = new HashMap<String, String>();{\n}
	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND BY PRIMARY KEY
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Find a {table.javaClassName} by its primary key{\n}
{\t} * {\n}
{\t} * @param connection the connection item{\n}
{\t} * @param {primaryFieldJavaName} the primary key{\n}
{\t} * {\n}
{\t} * @return the unique result or throw an exception if one couldn't be found{\n}
{\t} * {\n}
{\t} * @throws H2ZeroFinderException if one couldn't be found{\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static {table.javaClassName} findByPrimaryKey(Connection connection, Long {primaryFieldJavaName}) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}{table.javaClassName} {table.javaFieldName} = null;{\n}
{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\n}
{\t}{\t}if(null == {primaryFieldJavaName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result as the primary key field [{primaryFieldJavaName}] was null.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);{\n}
{\t}{\t}{\t}preparedStatement.setLong(1, {primaryFieldJavaName});{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}{table.javaFieldName} = uniqueResult(resultSet);{\n}
{\t}{\t}} catch (SQLException sqlex) {{{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(null == {table.javaFieldName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}}{\n}
{\t}{\t}return({table.javaFieldName});{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Find a {table.javaClassName} by its primary key{\n}
{\t} * {\n}
{\t} * @param {primaryFieldJavaName} the primary key{\n}
{\t} * {\n}
{\t} * @return the unique result or throw an exception if one coudn't be found.{\n}
{\t} * {\n}
{\t} * @throws H2ZeroFinderException if one couldn't be found{\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static {table.javaClassName} findByPrimaryKey(Long {primaryFieldJavaName}) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}{table.javaClassName} {table.javaFieldName} = null;{\n}
{\t}{\t}Connection connection = null;{\n}
{\n}
{\t}{\t}if(null == {primaryFieldJavaName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result as the primary key field [{primaryFieldJavaName}] was null.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
{\t}{\t}{\t}{table.javaFieldName} = findByPrimaryKey(connection, {primaryFieldJavaName});{\n}
{\t}{\t}} catch (SQLException sqlex) {{{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(connection);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(null == {table.javaFieldName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}}{\n}
{\t}{\t}return({table.javaFieldName});{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Find a {table.javaClassName} by its primary key and silently fail.{\n}
{\t} * I.e. Do not throw an exception on error.{\n}
{\t} * {\n}
{\t} * @param connection the connection item{\n}
{\t} * @param {primaryFieldJavaName} the primary key{\n}
{\t} * {\n}
{\t} * @return the unique result or null if it couldn't be found{\n}
{\t} * {\n}
{\t} */{\n}

{\t}public static {table.javaClassName} findByPrimaryKeySilent(Connection connection, Long {primaryFieldJavaName}) {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findByPrimaryKey(connection, {primaryFieldJavaName}));{\n}
{\t}{\t}} catch(H2ZeroFinderException h2zfex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + h2zfex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Find a {table.javaClassName} by its primary key and silently fail.{\n}
{\t} * I.e. Do not throw an exception on error.{\n}
{\t} * {\n}
{\t} * @param {primaryFieldJavaName} the primary key{\n}
{\t} * {\n}
{\t} * @return the unique result or null if it couldn't be found{\n}
{\t} * {\n}
{\t} */{\n}

{\t}public static {table.javaClassName} findByPrimaryKeySilent(Long {primaryFieldJavaName}) {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findByPrimaryKey({primaryFieldJavaName}));{\n}
{\t}{\t}} catch(H2ZeroFinderException h2zfex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + h2zfex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND ALL
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Find all {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @return a list of all of the {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static List<{table.javaClassName}> findAll(Integer limit, Integer offset) throws SQLException {{{\n}

{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\t}{\t}Connection connection = null;{\n}
{\t}{\t}List<{table.javaClassName}> results = new ArrayList<{table.javaClassName}>();{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_SELECT_START);{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}results = list(resultSet);{\n}
{\t}{\t}} catch(SQLException sqlex) {{{\n}
{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findAll(): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
{\t}{\t}}{\n}
{\n}

{\t}{\t}return(results);{\n}
{\t}}{\n}
{\n}

{\t}public static List<{table.javaClassName}> findAll() throws SQLException {{{\n}
{\t}{\t}return(findAll(null, null));{\n}
{\t}}{\n}

{\t}public static List<{table.javaClassName}> findAllSilent() {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findAll());{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findAllSilent(): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}>());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{set table as tableOrView}
{import classpath:/snippet/finder/user-finders.templar}
}
