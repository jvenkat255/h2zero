{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				AND THE ACTUAL USER DEFINED FINDERS (OR AUTO GENERATED FINDERS)

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	THE NON-SELECT CLAUSE FINDERS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

	{if fn:null[finder.selectClause]}

		{\t}/**{\n}
				{\t} * {finder.name}{\n}

				{loop finder.comments as comment}
					{\t} * {comment}{\n}
					{if commentStatus.last}
						{\t} * {\n}
					{endif}
				{endloop}

	{if finder.hasWhereFieldAliases}
		{loop finder.whereFields as whereField}
			{\t} * @param {whereField.javaName}{if whereField.isInField}List{endif}{\n}
		{endloop}
	{else}
		{loop finder.uniqueWhereFields as whereField}
			{\t} * @param {whereField.javaName}{if whereField.isInField}List{endif}{\n}
		{endloop}
	{endif}

		{\t} * {\n}
			{if finder.unique}
		{\t} * @return the unique result of {tableOrView.javaClassName} found{\n}
			{else}
		{\t} * @return the list of {tableOrView.javaClassName} results found{\n}
			{endif}
		{\t} * {\n}
		{\t} * @throws H2ZeroFinderException if no results could be found{\n}
		{\t} * @throws SQLException if there was an error in the SQL statement{\n}
		{\t} */{\n}

{--
	default finder 
}
		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
			{finder.name}(
				{import classpath:/snippet/finder/method-parameters.templar}
			) throws H2ZeroFinderException, SQLException {{{\n}

			{if options.metrics}
{\t}{\t}{table.javaFieldName}FinderAccess.inc();{\n}
			{endif}


		{\t}{\t}Connection connection = null;{\n}
		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{if finder.unique}
			{\t}{\t}{tableOrView.javaClassName} result = null;{\n}
		{else}
			{\t}{\t}List<{tableOrView.javaClassName}> results = null;{\n}
		{endif}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
				{loop finder.inWhereFields as whereField}
					{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
				{endloop}));{\n}

			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}

			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}

			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}result = uniqueResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}results = list(resultSet);{\n}
	
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were " 
				{import classpath:/snippet/finder/h2zero-exception-output.templar}
			);{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\n}
		{\t}{\t}if(null == result{if !finder.unique}s{endif}) {{{\n}
		{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result.");{\n}
		{\t}{\t}}{\n}
		{\t}{\t}return(result{if !finder.unique}s{endif});{\n}
		{\t}}{\n}
	{\n}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection.templar}
		) throws H2ZeroFinderException, SQLException {{{\n}

		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{if finder.unique}
			{\t}{\t}{tableOrView.javaClassName} result = null;{\n}
		{else}
			{\t}{\t}List<{tableOrView.javaClassName}> results = null;{\n}
		{endif}
		{\t}{\t}try {{{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}));{\n}
			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}


			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}
			{\n}

			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}result = uniqueResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}results = list(resultSet);{\n}

			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were " 
				{import classpath:/snippet/finder/h2zero-exception-output.templar}
			);{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\n}
		{\t}{\t}if(null == result{if !finder.unique}s{endif}) {{{\n}
		{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result.");{\n}
		{\t}{\t}}{\n}
		{\t}{\t}return(result{if !finder.unique}s{endif});{\n}
		{\t}}{\n}
	{\n}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}Silent(
			{import classpath:/snippet/finder/method-parameters.templar}
		) {{{\n}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}return({finder.name}(
			{import classpath:/snippet/finder/method-parameters-call.templar}
		));{\n}
		{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(
			{import classpath:/snippet/finder/h2zero-exception-output-silent.templar}
		): " + h2zfex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
		{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{tableOrView.javaClassName}>());{\n}
		{endif}

		{\t}{\t}} catch(SQLException sqlex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-silent.templar}

		): " + sqlex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
		{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{tableOrView.javaClassName}>());{\n}
		{endif}

		{\t}{\t}}{\n}

		{\t}}{\n}
	{\n}


		{--
			Generate the silent finder for the above finder with a connection being 
			passed in for any transactional lookups
		}
		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}Silent(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection.templar}
		) {{{\n}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}return({finder.name}(connection
			{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
		));{\n}
		{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-silent.templar}

		): " + h2zfex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
		{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{tableOrView.javaClassName}>());{\n}
		{endif}

		{\t}{\t}} catch(SQLException sqlex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-silent.templar}

		): " + sqlex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
		{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{tableOrView.javaClassName}>());{\n}
		{endif}

		{\t}{\t}}{\n}
		{\t}}{\n}
	{\n}
	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				AND THE SELECT CLAUSE FINDERS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}
		{\t}public static 
		{if finder.unique}{finder.tagName}Bean {else}List<{finder.tagName}Bean> {endif}
		{finder.name}(

			{import classpath:/snippet/finder/method-parameters.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}


			{if options.metrics}
{\t}{\t}{table.javaFieldName}FinderAccess.inc();{\n}
			{endif}


		{\t}{\t}Connection connection = null;{\n}
		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}


		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}));{\n}
			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}{-- end of finder in fields }


		{if finder.hasInFields}
			{\t}{\t}{\t}int i = 1;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
					{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
					{\t}{\t}{\t}{\t}i++;{\n}
					{\t}{\t}{\t}}{\n}

				{else}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
					{\t}{\t}{\t}i++;{\n}
				{endif}
			{endloop}
		{else}
			{loop finder.whereFields as whereField}
				{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
			{endloop}
		{endif}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}{finder.tagName}Bean result = unique{finder.tagName}BeanResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
				{\t}{\t}{\t}return(result);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}List<{finder.tagName}Bean> results = list{finder.tagName}Bean(resultSet);{\n}

				{\t}{\t}{\t}return(results);{\n}
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw h2zfex;{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}}{\n}
	{\n}



		{\t}public static 
		{if finder.unique}{finder.tagName}Bean {else}List<{finder.tagName}Bean> {endif}
		{finder.name}(Connection connection

			{import classpath:/snippet/finder/method-parameters-with-connection.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}
		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{\t}{\t}try {{{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}));{\n}
			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}


			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}{finder.tagName}Bean result = unique{finder.tagName}BeanResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
				{\t}{\t}{\t}return(result);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}List<{finder.tagName}Bean> results = list{finder.tagName}Bean(resultSet);{\n}

				{\t}{\t}{\t}return(results);{\n}
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw h2zfex;{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}}{\n}
	{\n}



		{\t}public static 
		{if finder.unique}{finder.tagName}Bean {else}List<{finder.tagName}Bean> {endif}
		{finder.name}Silent(
			{import classpath:/snippet/finder/method-parameters.templar}
		) {{{\n}

		{if finder.unique}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}(
				{import classpath:/snippet/finder/method-parameters-call.templar}
			));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}}{\n}
		{else}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}(
				{import classpath:/snippet/finder/method-parameters-bean.templar}
			));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.tagName}Bean>());{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.tagName}Bean>());{\n}
			{\t}{\t}}{\n}
		{endif}
		{\t}}{\n}
	{\n}


		{\t}public static 
		{if finder.unique}{finder.tagName}Bean {else}List<{finder.tagName}Bean> {endif}
		{finder.name}Silent(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection.templar}
		) {{{\n}

		{if finder.unique}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}(connection
				{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
			));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}}{\n}
		{else}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}(connection
				{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
				));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.tagName}Bean>());{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

				{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.tagName}Bean>());{\n}
			{\t}{\t}}{\n}
		{endif}
		{\t}}{\n}
	{\n}

	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				THE BEAN CREATORS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Return a unique result for the query - in effect just the first result of{\n}
{\t} * query.{\n}
{\t} * {\n}
{\t} * @param resultSet The result set of the query{\n}
{\t} * {\n}
{\t} * @return The {tableOrView.javaClassName} that represents this result{\n}
{\t} * {\n}
{\t} * @throws H2ZeroFinderException if no results were found{\n}
{\t} * @throws SQLException if there was a problem retrieving the results{\n}
{\t} */{\n}

{\t}private static {tableOrView.javaClassName} uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}if(resultSet.first()) {{{\n}
{\t}{\t}{\t}// we have a result{\n}
{loop tableOrView.fields as field}
	{\t}{\t}{\t}{field.javaType} {field.javaName} = resultSet.get{field.sqlJavaType}({fieldStatus.index});{\n}
		{if field.nullable}
			{\t}{\t}{\t}if(resultSet.wasNull()) {{{\n}
			{\t}{\t}{\t}{\t}{field.javaName} = null;{\n}
			{\t}{\t}{\t}}{\n}
		{endif}
{endloop}
{\n}
{\t}{\t}{\t}{tableOrView.javaClassName} {tableOrView.javaFieldName} = new {tableOrView.javaClassName}({loop tableOrView.fields as field}
{field.javaName}{if !fieldStatus.last}, {endif}
{endloop});{\n}
{\n}
{\t}{\t}{\t}if(resultSet.next()) {{{\n}
{\t}{\t}{\t}{\t}throw new H2ZeroFinderException("More than one result in resultset for unique finder.");{\n}
{\t}{\t}{\t}} else {{{\n}
{\t}{\t}{\t}{\t}return({tableOrView.javaFieldName});{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}// could not get a result{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Return the results as a list of {tableOrView.javaClassName}, this will be empty if{\n}
{\t} * none are found.{\n}
{\t} * {\n}
{\t} * @param resultSet the results as a list of {tableOrView.javaClassName}{\n}
{\t} * {\n}
{\t} * @return the list of results{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was a problem retrieving the results{\n}
{\t} */{\n}

{\t}private static List<{tableOrView.javaClassName}> list(ResultSet resultSet) throws SQLException {{{\n}
{\t}{\t}List<{tableOrView.javaClassName}> arrayList = new ArrayList<{tableOrView.javaClassName}>();{\n}
{\t}{\t}while(resultSet.next()) {{{\n}

{\t}{\t}{\t}arrayList.add(new {tableOrView.javaClassName}({\n}

{loop tableOrView.fields as field}
		{if field.nullable}
			{\t}{\t}{\t}{\t}{\t}ConnectionManager.getNullableResult{field.sqlJavaType}(resultSet, {fieldStatus.index})
		{else}
			{\t}{\t}{\t}{\t}{\t}resultSet.get{field.sqlJavaType}({fieldStatus.index})
		{endif}
	{if !fieldStatus.last},{\n}{endif}
{endloop}
));{\n}

{\t}{\t}}{\n}
{\t}{\t}return(arrayList);{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				THE SELECT CLAUSE BEAN CREATOR

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}
		{if finder.unique}
			{\t}/**{\n}
			{\t} * Return a unique result for the {finder.name} query - in effect just the first result of{\n}
			{\t} * query.{\n}
			{\t} * {\n}
			{\t} * @param resultSet The result set of the query{\n}
			{\t} * {\n}
			{\t} * @return The {finder.tagName}Beans that represents this result{\n}
			{\t} * {\n}
			{\t} * @throws H2ZeroFinderException if no results were found{\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static {finder.tagName}Bean unique{finder.tagName}BeanResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {{{\n}
			{\t}{\t}if(resultSet.first()) {{{\n}
			{\t}{\t}{\t}// we have a result{\n}

			{\t}{\t}{\t}return(new {finder.tagName}Bean({\n}
			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}} else {{{\n}
			{\t}{\t}{\t}// could not get any results{\n}
			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}}{\n}
			{\t}}{\n}
			{\n}

		{else}

			{\t}/**{\n}
			{\t} * Return the results as a list of {finder.tagName}Beans, this will be empty if{\n}
			{\t} * none are found.{\n}
			{\t} * {\n}
			{\t} * @param resultSet the results as a list of {finder.tagName}Bean{\n}
			{\t} * {\n}
			{\t} * @return the list of results{\n}
			{\t} * {\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static List<{finder.tagName}Bean> list{finder.tagName}Bean(ResultSet resultSet) throws SQLException {{{\n}
			{\t}{\t}List<{finder.tagName}Bean> arrayList = new ArrayList<{finder.tagName}Bean>();{\n}
			{\t}{\t}while(resultSet.next()) {{{\n}

			{\t}{\t}{\t}arrayList.add(new {finder.tagName}Bean({\n}

			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}}{\n}
			{\t}{\t}return(arrayList);{\n}
			{\t}}{\n}
			{\n}
		{endif}
	{endif}
{endloop}