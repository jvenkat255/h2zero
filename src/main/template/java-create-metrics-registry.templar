package {database.package}.metrics;{\n}{\n}

// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//                 (java-create-metrics-registry.templar){\n}{\n}
{\n}
import com.codahale.metrics.MetricRegistry;{\n}
{\n}
import synapticloop.h2zero.base.manager.MetricsManager;{\n}
import com.codahale.metrics.Counter;{\n}
import com.codahale.metrics.MetricRegistry;{\n}
import com.codahale.metrics.RatioGauge;{\n}
{\n}
{\n}

{loop database.tables as table}
import {database.package}.model.{table.javaClassName};{\n}
{endloop}
public class MetricsRegistry {{{\n}
	private static final MetricRegistry metricsRegistry = new MetricRegistry();{\n}
{\n}
	public static MetricRegistry getMetricsRegistry() {{ return metricsRegistry; }{\n}
{\n}

	{-- 
		NOW FOR THE METRICS
	}
	{\t}// These are the metrics holders - there are a lot of them - better to have and not need, than need and not have!{\n}
	{\t}// <fieldName>SetterHit counts the number setters that are invoked which successfully changes the value{\n}
	{\t}// <fieldName>SetterMiss counts the number of setters that did not change the value{\n}
	{\n}
	{\t}// <fieldName>SetterHitRatio provides the ratio of hits to total setters{\n}
	{\t}// <fieldName>SetterMissRatio provides the ratio of misses to total setters{\n}
	{\n}
	{\n}
	{\t}// <fieldName>GetterHit counts the number of getters that returns an already filled in value{\n}
	{\t}// <fieldName>GetterMiss counts the number of getters that needed to be loaded from a non-populated value{\n}
	{\n}
	{\t}// <fieldName>GetterHitRatio provides the ratio of hits to total getters{\n}
	{\t}// <fieldName>GetterMissRatio provides the ratio of misses to total getters{\n}
	{\n}
	{\n}
	{\t}// <className>GetterHit counts the number of getters that returns an already filled in object{\n}
	{\t}// <className>GetterMiss counts the number of getters that needed to be loaded from a non-populated object{\n}
	{\n}
	{\t}// <className>GetterHitRatio provides the ratio of hits to total getters{\n}
	{\t}// <className>GetterMissRatio provides the ratio of misses to total getters{\n}
	{\n}

	{loop database.tables as table}
		{loop table.fields as field}

			{if fn:notNull[field.foreignKeyTable]}
				{\t}public static final Counter {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "{field.secondaryJavaName}", "getter", "hit"));{\n}
				{\t}public static final Counter {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "{field.secondaryJavaName}", "getter", "miss"));{\n}
				{\t}public static final RatioGauge {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name({table.javaClassName}.class, "{field.secondaryJavaName}", "getter", "hit", "ratio"), new RatioGauge() {{ 
					protected Ratio getRatio() {{ 
						return(Ratio.of({table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterHit.getCount(), {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterHit.getCount() + {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterMiss.getCount()));
					}
				});{\n}
				{\t}public static final RatioGauge {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name({table.javaClassName}.class, "{field.secondaryJavaName}", "getter", "miss", "ratio"), new RatioGauge() {{ 
					protected Ratio getRatio() {{ 
						return(Ratio.of({table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterMiss.getCount(), {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterHit.getCount() + {table.javaFieldName}{field.foreignKeyTableLookup.javaClassName}GetterMiss.getCount()));
					}
				});{\n}
			{endif}

			{\t}public static final Counter {table.javaFieldName}{field.javaAccessorName}GetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "getter", "hit"));{\n}
			{\t}public static final Counter {table.javaFieldName}{field.javaAccessorName}GetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "getter", "miss"));{\n}
			{\t}public static final RatioGauge {table.javaFieldName}{field.javaAccessorName}GetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "getter", "hit", "ratio"), new RatioGauge() {{ 
				protected Ratio getRatio() {{ 
					return(Ratio.of({table.javaFieldName}{field.javaAccessorName}GetterHit.getCount(), {table.javaFieldName}{field.javaAccessorName}GetterHit.getCount() + {table.javaFieldName}{field.javaAccessorName}GetterMiss.getCount()));
				}
			});{\n}
			{\t}public static final RatioGauge {table.javaFieldName}{field.javaAccessorName}GetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "getter", "miss", "ratio"), new RatioGauge() {{ 
				protected Ratio getRatio() {{ 
					return(Ratio.of({table.javaFieldName}{field.javaAccessorName}GetterMiss.getCount(), {table.javaFieldName}{field.javaAccessorName}GetterHit.getCount() + {table.javaFieldName}{field.javaAccessorName}GetterMiss.getCount()));
				}
			});{\n}

			{\t}public static final Counter {table.javaFieldName}{field.javaAccessorName}SetterHit = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "setter", "hit"));{\n}
			{\t}public static final Counter {table.javaFieldName}{field.javaAccessorName}SetterMiss = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "setter", "miss"));{\n}

			{\t}public static final RatioGauge {table.javaFieldName}{field.javaAccessorName}SetterHitRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "Setter", "hit", "ratio"), new RatioGauge() {{ 
				protected Ratio getRatio() {{ 
					return(Ratio.of({table.javaFieldName}{field.javaAccessorName}SetterHit.getCount(), {table.javaFieldName}{field.javaAccessorName}SetterHit.getCount() + {table.javaFieldName}{field.javaAccessorName}SetterMiss.getCount()));
				}
			});{\n}
			{\t}public static final RatioGauge {table.javaFieldName}{field.javaAccessorName}SetterMissRatio = MetricsManager.getMetricsRegistry().register(MetricRegistry.name({table.javaClassName}.class, "{field.javaName}", "Setter", "miss", "ratio"), new RatioGauge() {{ 
				protected Ratio getRatio() {{ 
					return(Ratio.of({table.javaFieldName}{field.javaAccessorName}SetterMiss.getCount(), {table.javaFieldName}{field.javaAccessorName}SetterHit.getCount() + {table.javaFieldName}{field.javaAccessorName}SetterMiss.getCount()));
				}
			});{\n}

		{endloop}
		{\n}

		{\t}// now for the table statistics{\n}
		{\t}public static final Counter {table.javaFieldName}Insert = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "insert"));{\n}
		{\t}public static final Counter {table.javaFieldName}InsertOrUpdate = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "insertOrUpdate"));{\n}
		{\t}public static final Counter {table.javaFieldName}Delete = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "delete"));{\n}
		{\t}public static final Counter {table.javaFieldName}Ensure = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "ensure"));{\n}
		{\t}public static final Counter {table.javaFieldName}Refresh = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "refresh"));{\n}
		{\t}public static final Counter {table.javaFieldName}Update = MetricsManager.getMetricsRegistry().counter(MetricRegistry.name({table.javaClassName}.class, "update"));{\n}
		{\n}

	{endloop}

}
