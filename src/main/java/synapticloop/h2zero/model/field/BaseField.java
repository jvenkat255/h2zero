package synapticloop.h2zero.model.field;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashSet;
import java.util.Iterator;

import org.json.JSONObject;

import synapticloop.h2zero.exception.H2ZeroParseException;
import synapticloop.h2zero.model.Database;
import synapticloop.h2zero.model.Table;
import synapticloop.h2zero.model.util.JSONKeyConstants;
import synapticloop.h2zero.util.AssertionHelper;
import synapticloop.h2zero.util.JsonHelper;
import synapticloop.h2zero.util.NamingHelper;


public abstract class BaseField {
	private static String ALLOWABLE_UPDATE_DELETE_VALUES = null;
	private static HashSet<String> ALLOWABLE_UPDATE_DELETE_ACTIONS = new HashSet<String>();
	static {
		ALLOWABLE_UPDATE_DELETE_ACTIONS.add("RESTRICT");
		ALLOWABLE_UPDATE_DELETE_ACTIONS.add("CASCADE");
		ALLOWABLE_UPDATE_DELETE_ACTIONS.add("SET NULL");
		ALLOWABLE_UPDATE_DELETE_ACTIONS.add("NO ACTION");
		
		StringBuilder stringBuilder = new StringBuilder();
		Iterator<String> iterator = ALLOWABLE_UPDATE_DELETE_ACTIONS.iterator();
		while (iterator.hasNext()) {
			String value = (String) iterator.next();
			stringBuilder.append("'" + value + "'");
			if(iterator.hasNext()) {
				stringBuilder.append(", ");
			}
		}
		
		ALLOWABLE_UPDATE_DELETE_VALUES = stringBuilder.toString();
	}

	private JSONObject jsonObjectConstructor = null;
	protected String name = null;
	private String alias = null;
	protected String type = null;
	protected int length = 0;
	protected boolean nullable = true;
	protected int decimalLength = 0;
	protected String defaultValue = null;
	protected boolean primary = false;
	protected boolean index = false;
	protected boolean unique = false;
	protected boolean populate = true;
	protected boolean secure = false;
	protected boolean isInField = false;
	protected boolean isLargeObject = false;
	protected String onUpdate = null;
	protected String onDelete = null;

	protected String foreignKeyTable = null;
	protected String foreignKeyField = null;

	// generated for the updaters
	protected String javaName = null;
	private String secondaryJavaName = null;
	private String secondaryJavaFieldName = null;

	// these are for the forms
	protected String validator = null;
	protected String formField = null;
	protected int minLength;

	private boolean isAutoGeneratedFinder = false;
	private String foreignKey;

	/**
	 * Create a new basefield object from the passed in JSON object
	 * 
	 * @param jsonObject the json object to create the basefield
	 * 
	 * @throws H2ZeroParseException if there was a problem with getting the values out of the json object
	 */
	public BaseField(JSONObject jsonObject) throws H2ZeroParseException {
		this.jsonObjectConstructor = jsonObject;

		this.name = JsonHelper.getStringValue(jsonObject, "name", null);
		this.javaName = NamingHelper.getSecondUpper(name);
		this.secondaryJavaName = NamingHelper.getSecondPartUpper(name);
		this.secondaryJavaFieldName = NamingHelper.getFirstPartUpper(name);
		this.type = JsonHelper.getStringValue(jsonObject, "type", null);
		this.length = JsonHelper.getIntValue(jsonObject, "length", length);
		this.decimalLength = JsonHelper.getIntValue(jsonObject, "decimalLength", decimalLength);
		this.nullable = JsonHelper.getBooleanValue(jsonObject, "nullable", nullable);
		this.defaultValue = JsonHelper.getStringValue(jsonObject, "default", defaultValue);
		this.primary = JsonHelper.getBooleanValue(jsonObject, "primary", primary);
		this.index = JsonHelper.getBooleanValue(jsonObject, "index", index);
		this.unique = JsonHelper.getBooleanValue(jsonObject, "unique", unique);

		this.validator = JsonHelper.getStringValue(jsonObject, "validator", null);
		this.minLength = JsonHelper.getIntValue(jsonObject, "minLength", 0);
		this.populate = jsonObject.optBoolean("populate", true);
		this.populate = jsonObject.optBoolean("secure", false);

		this.foreignKey = jsonObject.optString(JSONKeyConstants.FOREIGN_KEY, null);

		if(null != foreignKey) {
			// split into table and field
			String[] split = foreignKey.split("\\.");
			if(split.length != 2) {
				throw new H2ZeroParseException("Field '" + name + "' has a '" + JSONKeyConstants.FOREIGN_KEY + " key which must be in the format of <foreign_table_name>.<field_name>");
			} else {
				foreignKeyTable = split[0];
				foreignKeyField = split[1];
			}
		}

		AssertionHelper.assertNotNull("name", name);
		AssertionHelper.assertNotNull("type", name);

		// now we need the on cascades - but only if there are foreign keys

		onDelete = jsonObject.optString(JSONKeyConstants.ON_DELETE, null);
		if(null != onDelete) {
			if(null == foreignKeyTable || null == foreignKeyTable) {
				throw new H2ZeroParseException("Field '" + name + "' cannot have a '" + JSONKeyConstants.ON_DELETE + "' unless there is a '" + JSONKeyConstants.FOREIGN + "' on the same field.");
			}

			onDelete = onDelete.toUpperCase();
			// make sure it is a valid value
			if(!ALLOWABLE_UPDATE_DELETE_ACTIONS.contains(onDelete)) {
				throw new H2ZeroParseException("Field '" + name + "' cannot have a '" + JSONKeyConstants.ON_DELETE + "' has an invalid value of '" + onDelete + "', allowable values are: " + ALLOWABLE_UPDATE_DELETE_VALUES);
			}
		}

		
		onUpdate = jsonObject.optString(JSONKeyConstants.ON_UPDATE, null);
		if(null != onUpdate) {
			if(null == foreignKeyTable || null == foreignKeyTable) {
				throw new H2ZeroParseException("Field '" + name + "' cannot have a '" + JSONKeyConstants.ON_UPDATE + "' unless there is a '" + JSONKeyConstants.FOREIGN + "' on the same field.");
			}

			onUpdate = onUpdate.toUpperCase();
			// make sure it is a valid value
			if(!ALLOWABLE_UPDATE_DELETE_ACTIONS.contains(onUpdate)) {
				throw new H2ZeroParseException("Field '" + name + "' cannot have a '" + JSONKeyConstants.ON_UPDATE + "' has an invalid value of '" + onUpdate + "', allowable values are: " + ALLOWABLE_UPDATE_DELETE_VALUES);
			}
		}

		if(jsonObject.optString("finder", null) != null) {
			// no validation done here - this should have already been done
			this.isAutoGeneratedFinder = true;
		}
	}

	public BaseField(JSONObject jsonObject, boolean isInfield) throws H2ZeroParseException {
		this(jsonObject);
		this.isInField = isInfield;
	}

	/**
	 * Get the field name
	 * 
	 * @return the field name
	 */
	public String getName() { return(name); }
	public String getUpperName() { return(name.toUpperCase()); }
	public String getType() { return(type); }
	public String getUpperType() { return(NamingHelper.getFirstUpper(type)); }
	public boolean getNullable() { return(nullable); }
	public String getDefault() { return(defaultValue); }
	public boolean getPrimary() { return(primary); }
	public boolean getIndex() { return(index); }
	public boolean getUnique() {return(unique); }
	public boolean getPopulate() { return populate; }
	public void setPopulate(boolean populate) { this.populate = populate; }
	public boolean getSecure() { return secure; }
	public boolean getIsInField() { return isInField; }

	public String getJavaName() {
		if(null != alias) {
			return(alias);
		} else {
			return(javaName);
		}
	}

	public String getSecondaryJavaName() { return secondaryJavaName; }
	public String getSecondaryJavaFieldName() { return secondaryJavaFieldName; }
	public void suffixJavaName(String suffix) { this.javaName = javaName + suffix; }

	public String getJavaAccessorName() {
		if(null != alias) {
			return(NamingHelper.getFirstUpper(alias));
		} else {
			return(NamingHelper.getFirstUpper(name));
		}
	}

	public String getForeignKeyTable() { return(foreignKeyTable); }
	public Table getForeignKeyTableLookup() { return(Database.getTableLookup(foreignKeyTable)); }
	public String getForeignKeyField() { return(foreignKeyField); }
	public BaseField getForeignKeyFieldLookup() { return(Database.getTableLookup(foreignKeyTable).getField(foreignKeyField)); }

	public abstract String getJavaType();
	public abstract String getSqlNullType();
	public abstract String getSqlJavaType();
	public abstract boolean getShouldEscape();

	public String getFormField() {
		if(null == formField) {
			return(getSqlJavaType() + "FormField");
		} else {
			return(formField);
		}
	}

	public String getValidator() {
		if(null == validator) {
			return(getSqlJavaType() + "Validator");
		} else {
			return(validator);
		}
	}

	public int getMinLength() { return(minLength); }
	public int getMaxLength() { return(length); }

	public String getLengthFormat() {
		StringBuilder stringBuilder = new StringBuilder();
		if(length != 0) {
			stringBuilder.append("(");
			stringBuilder.append(length);
			if(decimalLength != 0) {
				stringBuilder.append(",");
				stringBuilder.append(decimalLength);
			}
			stringBuilder.append(")");
		}
		return(stringBuilder.toString());
	}

	public String getCreateField() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("\t");

		// name
		stringBuilder.append(name);
		stringBuilder.append(" ");

		// type and length
		stringBuilder.append(type);
		stringBuilder.append(getLengthFormat());

		if(!nullable) {
			stringBuilder.append(" not");
		}

		stringBuilder.append(" null");

		if(primary) {
			stringBuilder.append(" auto_increment");
		}

		if(null != defaultValue) {
			stringBuilder.append(" default " + defaultValue);
		}

		if(primary) {
			stringBuilder.append(",\n\tprimary key(" + name + ")");
		}

		if(unique) {
			stringBuilder.append(",\n\tunique key(" + name + ")");
		}

		if(index) {
			stringBuilder.append(",\n\tindex (" + name + ")");
		}

		stringBuilder.append("\n");
		return (stringBuilder.toString());
	}

	public boolean getIsLargeObject() { return isLargeObject; }
	public boolean getIsAutoGeneratedFinder() { return isAutoGeneratedFinder; }
	public void setIsAutoGeneratedFinder(boolean isAutoGeneratedFinder) { this.isAutoGeneratedFinder = isAutoGeneratedFinder; }
	public String getAlias() { return alias; }
	public void setAlias(String alias) { this.alias = alias; }
	public boolean getHasAlias() { return(null != this.alias); }
	public String getOnUpdate() { return(onUpdate); }
	public String getOnDelete() { return(onDelete); }

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public BaseField copy() throws H2ZeroParseException {
		String firstUpper = NamingHelper.getFirstUpper(this.type);

		Class forName = null;
		Constructor constructor = null;
		BaseField baseField = null;
		try {
			forName = Class.forName("synapticloop.h2zero.model.field." + firstUpper + "Field");
			constructor = forName.getConstructor(JSONObject.class);
			baseField = (BaseField)constructor.newInstance(jsonObjectConstructor);
		} catch (NoSuchMethodException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		} catch (SecurityException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		} catch (ClassNotFoundException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		} catch (InstantiationException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		} catch (IllegalAccessException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		} catch (IllegalArgumentException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		} catch (InvocationTargetException ex) {
			throw new H2ZeroParseException("Could not create baseField copy", ex);
		}

		return(baseField);
	}
}
