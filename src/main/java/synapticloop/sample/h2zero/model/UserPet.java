package synapticloop.sample.h2zero.model;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                  (java-create-model.templar)

import synapticloop.h2zero.base.manager.ConnectionManager;
import synapticloop.h2zero.base.model.ModelBase;
import synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;
import java.lang.StringBuilder;
import java.sql.Connection;
import java.sql.Date;
import java.sql.Clob;
import java.sql.Blob;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import synapticloop.sample.h2zero.model.util.Constants;

import synapticloop.sample.h2zero.finder.UserPetFinder;
import synapticloop.sample.h2zero.finder.UserFinder;
import synapticloop.sample.h2zero.finder.PetFinder;


public class UserPet extends ModelBase {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_PET_binder;

	public static final String PRIMARY_KEY_FIELD = "id_user_pet";

	private static final String SQL_INSERT = "insert into user_pet values (?, ?, ?)";
	private static final String SQL_UPDATE = "update user_pet set id_user = ?, id_pet = ? where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_DELETE = "delete from user_pet where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_ENSURE = "select " + PRIMARY_KEY_FIELD + " from user_pet where id_user = ? and id_pet = ?";

	// whether the fields are auto-populated
	private boolean[] populated = {false, false, false };

 	private User user = null;
	private Pet pet = null;

	private Long idUserPet = null;
	private Long idUser = null;
	private Long idPet = null;

	public UserPet(Long idUserPet, Long idUser, Long idPet) {
		this.idUserPet = idUserPet;
		this.idUser = idUser;
		this.idPet = idPet;
	}

	private boolean primaryKeySet() {
		return(null != idUserPet);
	}


	public void insert(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot insert bean when primary key is not null.");
		}
		// create this bean 
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
		ConnectionManager.setBigint(preparedStatement, 1, idUserPet);
		ConnectionManager.setBigint(preparedStatement, 2, idUser);
		ConnectionManager.setBigint(preparedStatement, 3, idPet);
		preparedStatement.executeUpdate();
		ResultSet resultSet = preparedStatement.getGeneratedKeys();
		if(resultSet.next()) {
			this.idUserPet = resultSet.getLong(1);
		} else {
			throw new H2ZeroPrimaryKeyException("Could not get return value for primary key!");
		}
		ConnectionManager.closeAll(resultSet, preparedStatement);
	}

	public void insertSilent(Connection connection) {
		try {
			insert(connection);
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		}
	}

	public void insert() throws SQLException, H2ZeroPrimaryKeyException {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			insert(connection);
			connection.close();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void insertSilent() {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			insert(connection);
			connection.close();
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void ensure(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_ENSURE);
		ConnectionManager.setBigint(preparedStatement, 1, idUser);
		ConnectionManager.setBigint(preparedStatement, 2, idPet);
		ResultSet resultSet = preparedStatement.executeQuery();
		if(resultSet.next()) {
			this.idUserPet = resultSet.getLong(1);
		} else {
			// could not find the value - need to insert it - null is the primary key
			insert(connection);
		}
		ConnectionManager.closeAll(resultSet, preparedStatement);
	}

	public void ensureSilent(Connection connection) {
		try {
			ensure(connection);
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		}
	}

	public void ensure() throws SQLException, H2ZeroPrimaryKeyException {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			ensure(connection);
			connection.close();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void ensureSilent() {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			ensure(connection);
			connection.close();
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void update(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot update bean when primary key is null.");
		}
		if(isDirty) {
			// update this bean, but only if dirty
			PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE);
			ConnectionManager.setBigint(preparedStatement, 1, idUser);
			ConnectionManager.setBigint(preparedStatement, 2, idPet);
			// now set the primary key
			preparedStatement.setLong(3, idUserPet);
			preparedStatement.executeUpdate();
			ConnectionManager.closeAll(preparedStatement);
			isDirty = false;
		}
	}

	public void updateSilent(Connection connection) {
		try {
			update(connection);
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		}
	}

	public void update() throws SQLException, H2ZeroPrimaryKeyException {
		Connection connection = ConnectionManager.getConnection();
		update(connection);
		connection.close();
	}

	public void updateSilent() {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			update(connection);
			connection.close();
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void insertOrUpdateSilent() {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			if(!primaryKeySet()) {
				insert(connection);
			} else {
				update(connection);
			}
			connection.close();
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void delete(Connection connection) throws SQLException, H2ZeroPrimaryKeyException{
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot delete bean when primary key is null.");
		}
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE);
		preparedStatement.setLong(1, idUserPet);
		preparedStatement.executeUpdate();
		ConnectionManager.closeAll(preparedStatement);
	}

	public void deleteSilent(Connection connection) {
		try {
			delete(connection);
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		}
	}

	public void delete() throws SQLException, H2ZeroPrimaryKeyException {
		Connection connection = ConnectionManager.getConnection();
		delete(connection);
		connection.close();
	}

	public void deleteSilent() {
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			delete(connection);
			connection.close();
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		} catch(SQLException sqlex) {
			sqlex.printStackTrace();
		} finally {
			if(connection != null) {
				try {
					connection.close();
				} catch (SQLException sqlex) {
					// do nothing
				} finally {
					connection = null;
				}
			}
		}
	}

	public void refresh() throws H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot refresh bean when primary key is null.");
		}
		UserPet userPet = UserPetFinder.findByPrimaryKeySilent(this.idUserPet);
		this.idUserPet = userPet.getIdUserPet();
		this.idUser = userPet.getIdUser();
		this.idPet = userPet.getIdPet();
	}

	public void refreshSilent() {
		try {
			refresh();
		} catch(H2ZeroPrimaryKeyException h2zpkex) {
			h2zpkex.printStackTrace();
		}
	}

 	public User getUser() {
		if(null == this.user) {
			this.user = UserFinder.findByPrimaryKeySilent(this.idUser);
		}
		return(this.user);
	}

	public Pet getPet() {
		if(null == this.pet) {
			this.pet = PetFinder.findByPrimaryKeySilent(this.idPet);
		}
		return(this.pet);
	}

	/*
	 * Boring ol' getters and setters 
	 */

	public Long getIdUserPet() {return(this.idUserPet);}
	public void setIdUserPet(Long idUserPet) {if(isDifferent(this.idUserPet, idUserPet)) {this.idUserPet = idUserPet;this.isDirty = true;}}
	public Long getIdUser() {return(this.idUser);}
	public void setIdUser(Long idUser) {if(isDifferent(this.idUser, idUser)) {this.idUser = idUser;this.isDirty = true;this.user = null;}}
	public Long getIdPet() {return(this.idPet);}
	public void setIdPet(Long idPet) {if(isDifferent(this.idPet, idPet)) {this.idPet = idPet;this.isDirty = true;this.pet = null;}}

	public String toString() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("Model[UserPet]\n");
		stringBuilder.append("  Field[idUserPet:" + this.idUserPet + "]\n");
		stringBuilder.append("  Field[idUser:" + this.idUser + "]\n");
		stringBuilder.append("  Field[idPet:" + this.idPet + "]\n");
		return(stringBuilder.toString());
	}

	public String toJsonString() {
		// !!! work in progress !!!
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("{\n");
		stringBuilder.append("  \"model\": {\n");
		stringBuilder.append("    \"name\": \"UserPet\",\n");
		stringBuilder.append("    \"fields\": [\n");
		stringBuilder.append("     { \"name\": \"idUserPet\", \"value\": " + this.idUserPet + " }, \n");
		stringBuilder.append("     { \"name\": \"idUser\", \"value\": " + this.idUser + " }, \n");
		stringBuilder.append("     { \"name\": \"idPet\", \"value\": " + this.idPet + " }\n");
		stringBuilder.append("    ]\n");
		stringBuilder.append("  }\n");
		stringBuilder.append("}\n");
		return(stringBuilder.toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}
}