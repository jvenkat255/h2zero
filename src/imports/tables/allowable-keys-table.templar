<h4>Allowable keys for a {object} JSON Object</h4>

<table>
	<thead>
		<tr>
			<th>key name</th>
			<th>key value type</th>
			<th>usage</th>
			<th>notes</th>
			</tr>
	</thead>

	<tbody>
		<tr>
			<td><strong>name</strong></td>
			<td>String</td>
			<td>mandatory</td>
			<td>This is the name for the {name}.  If not present on the JSON object an <code>H2ZeroParseException</code> will be thrown.</td>
		</tr>

		{if !fn:null[keySelectClause]}
		<tr>
			<td><strong>{import src/imports/links/selectClause.templar}</strong></td>
			<td>String</td>
			<td>{if fn:null[keySelectClause]}undocumented{else}{keySelectClause}{endif}</td>
			<td>
				<strong>For general SQL interactions:</strong> By default, the select query will be a <code>select * from &lt;table_name&gt,</code> 
				If you wish to over-ride this  default behaviour, then this is the SQL query that will be run.

				<br /><br />

				<strong>For <code>inserters</code> SQL interactions:</strong> This is the SQL query that is used to insert the 
				values for the table.  This may also be a cross-table select.

				{if !fn:null[keySelectClauseInfo]}{keySelectClauseInfo}{endif}
				{if fn:=[keySelectClause, invalid]}
					<br /><br />This will generate a <strong>FATAL</strong> validation message if present on the JSON object.
				{else}
					{if fn:=[keySelectClause, ignored]}
						<br /><br />This will generate a <strong>WARN</strong> validation message if present on the JSON object.
					{else}
						{if fn:=[keySelectClause, mandatory]}
							<br /><br />This will generate a <strong>FATAL</strong> validation message if not present on the JSON object.
						{endif}
					{endif}
				{endif}
			</td>
		</tr>
		{endif}

		{if !fn:null[keySelectFields]}
		<tr>
			<td><strong>{import src/imports/links/selectFields.templar}</strong></td>
			<td>JSON Array (String)</td>
			<td>{if fn:null[keySelectFields]}undocumented{else}{keySelectFields}{endif}</td>
			<td>
				Select fields are {keySelectFields} for the <code>{name}</code> JSON object. {if !fn:null[keySelectFieldsInfo]}{keySelectFieldsInfo}{endif}
				{if fn:=[keySelectFields, invalid]}
					<br /><br />This will generate a <strong>FATAL</strong> validation message if present on the JSON object.
				{else}
					{if fn:=[keySelectFields, ignored]}
						<br /><br />This will generate a <strong>WARN</strong> validation message if present on the JSON object.
					{else}
						{if fn:=[keySelectFields, mandatory]}
							<br /><br />This will generate a <strong>FATAL</strong> validation message if not present on the JSON object.
						{endif}
					{endif}
				{endif}
			</td>
		</tr>
		{endif}


		{if !fn:null[keySetClause]}
		<tr>
			<td><strong>{import src/imports/links/setClause.templar}</strong></td>
			<td>String</td>
			<td>{if fn:null[keySetClause]}undocumented{else}{keySetClause}{endif}</td>
			<td>
				<strong>Used for updaters only:</strong> You must provide a set clause which 
				is valid SQL for inserting into the database.

				{if fn:=[keySetClause, "invalid"]}
					<br /><br />This will generate a <strong>FATAL</strong> validation message if present on the JSON object.
				{else}
					{if fn:=[keySetClause, "ignored"]}
						<br /><br />This will generate a <strong>WARN</strong> validation message if present on the JSON object.
					{else}
						{if fn:=[keySetClause, "mandatory"]}
							<br /><br />This will generate a <strong>FATAL</strong> validation message if not present on the JSON object.
						{endif}
					{endif}
				{endif}
			</td>
		</tr>
		{endif}

		{if !fn:null[keySetFields]}
		<tr>
			<td><strong>{import src/imports/links/setFields.templar}</strong></td>
			<td>JSON Array (String)</td>
			<td>{if fn:null[keySetFields]}undocumented{else}{keySetFields}{endif}</td>
			<td>
				Select fields are {keySetFields} for the <code>{name}</code> JSON object. {if !fn:null[keySetFieldsInfo]}{keySetFieldsInfo}{endif}
				{if fn:=[keySetFields, "invalid"]}
					<br /><br />This will generate a <strong>FATAL</strong> validation message if present on the JSON object.
				{else}
					{if fn:=[keySetFields, "ignored"]}
						<br /><br />This will generate a <strong>WARN</strong> validation message if present on the JSON object.
					{else}
						{if fn:=[keySetFields, "mandatory"]}
							<br /><br />This will generate a <strong>FATAL</strong> validation message if not present on the JSON object.
						{endif}
					{endif}
				{endif}
			</td>
		</tr>
		{endif}

		{if !fn:null[keyInsertClause]}
		<tr>
			<td><strong>{import src/imports/links/insertClause.templar}</strong></td>
			<td>JSON Array</td>
			<td>{if fn:null[keyInsertClause]}undocumented{else}{keyInsertClause}{endif}</td>
			<td>
				The insert clause is only valid for {import src/imports/links/inserters.templar} and cannot be used for any 
				other SQL interaction.

				<br /><br />

				By default, the insert clause will be a generated with all of the fields from the <code>&lt;table_name&gt</code>, 
				however this may be over-ridden to include only non-nullable fields.

				<br /><br />If you wish to over-ride this default behaviour, then this is the SQL query that will be run.

				{if fn:=[keyInsertClause, invalid]}
					<br /><br />This will generate a <strong>FATAL</strong> validation message if present on the JSON object.
				{else}
					{if fn:=[keyInsertClause, ignored]}
						<br /><br />This will generate a <strong>WARN</strong> validation message if present on the JSON object.
					{else}
						{if fn:=[keyInsertClause, mandatory]}
							<br /><br />This will generate a <strong>FATAL</strong> validation message if not present on the JSON object.
						{endif}
					{endif}
				{endif}
			</td>
		</tr>
		{endif}

		<tr>
			<td><strong>{import src/imports/links/whereClause.templar}</strong></td>
			<td>String</td>
			<td>{if fn:null[keyWhereClause]}undocumented{else}{keyWhereClause}{endif}</td>
			<td>Used if the SQL query is parameterised. {if !fn:null[keyWhereClauseInfo]}{keyWhereClauseInfo}{endif}</td>
		</tr>

		<tr>
			<td><strong>{import src/imports/links/whereFields.templar}</strong></td>
			<td>JSON Array (String)</td>
			<td>{if fn:null[keyWhereFields]}undocumented{else}{keyWhereFields}{endif}</td>
			<td>
				The name for each of the {import src/imports/links/whereClause.templar} parameters.
				<br/><br />
				If there is a {import src/imports/links/whereFields.templar} key on the JSON object without any 
				{import src/imports/links/whereClause.templar} then this will generate a <strong>FATAL</strong> 
				validation message.
			</td>
		</tr>

		<tr>
			<td><strong><code>unique</code></strong></td>
			<td>boolean (default false)</td>
			<td>{if fn:null[keyUnique]}undocumented{else}{keyUnique}{endif}</td>
			<td>
				Whether the SQL query will return a single object or an <code>List</code> of objects.{if !fn:null[keyUniqueInfo]}{keyUniqueInfo}{endif}
				{if fn:=[keyUnique, invalid]}
					<br /><br />This will generate a <strong>FATAL</strong> validation message if present on the JSON object.
				{else}
					{if fn:=[keyUnique, ignored]}
						<br /><br />This will generate a <strong>WARN</strong> validation message if present on the JSON object.
					{else}
						{if fn:=[keyUnique, mandatory]}
							<br /><br />This will generate a <strong>FATAL</strong> validation message if not present on the JSON object.
						{endif}
					{endif}
				{endif}
			</td>
		</tr>
	</tbody>
</table>